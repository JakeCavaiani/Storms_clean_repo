rep("MOOS_storm7c_08_15_fDOM", 50),
rep("MOOS_storm7c_08_15_SPC", 50),
rep("MOOS_storm7c_08_15_turb", 50),
rep("MOOS_storm8_09_21_fDOM", 50),
rep("MOOS_storm8_09_21_SPC", 50),
rep("MOOS_storm8_09_21_turb", 50),
rep("MOOS_storm9_10_02_NO3", 50),
rep("MOOS_storm9_10_02_fDOM", 50),
rep("MOOS_storm9_10_02_SPC", 50),
rep("MOOS_storm9_10_02_turb", 50))
MOOS.HI.df$storm.ID = as.factor(MOOS.HI.df$storm.ID)
MOOS.HI.df = separate(data=MOOS.HI.df, col=storm.ID, into=c("site.ID","storm.num", "month", "day", "response"), sep = "_", remove = F)
par(mfrow=c(1,1))
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
g0 <- ggplot(MOOS.HI.df, aes(x = storm.num, y = HI, label=storm.num, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
ggsave("~/Documents/Storms_clean_repo/plots/HI_plots/2019/MOOS/MOOS.HI.median.boot.pdf", plot=g2, width = 8, height = 6, units ="in")
write.csv(MOOS.HI.df, "~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2019/MOOS/MOOS.HI.df.csv")
MOOS.HI.df$date <- as.Date(with(MOOS.HI.df, paste(month, day, sep = "-")), "%m-%d")
MOOS.HI.df$doy <- yday(MOOS.HI.df$date)
g0 <- ggplot(MOOS.HI.df, aes(x = doy, y = HI, label=doy, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
ggsave("~/Documents/Storms_clean_repo/plots/HI_plots/2019/MOOS/MOOS.HI.median.boot.doy.pdf", plot=g2, width = 8, height = 6, units ="in")
write.csv(MOOS.HI.df, "~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2019/MOOS/MOOS.HI.df.doy.csv")
reticulate::repl_python()
CARI.hyst.results.list = list(py$hysdict_CARI_storm1_05_08_NO3,
py$hysdict_CARI_storm1_05_08_fDOM,
py$hysdict_CARI_storm1_05_08_SPC,
py$hysdict_CARI_storm1_05_08_turb,
py$hysdict_CARI_storm2_06_30_NO3,
py$hysdict_CARI_storm2_06_30_fDOM,
py$hysdict_CARI_storm2_06_30_SPC,
py$hysdict_CARI_storm2_06_30_turb,
py$hysdict_CARI_storm3_07_12_NO3,
py$hysdict_CARI_storm3_07_12_fDOM,
py$hysdict_CARI_storm3_07_12_SPC,
py$hysdict_CARI_storm3_07_12_turb,
py$hysdict_CARI_storm5_07_31_NO3,
py$hysdict_CARI_storm5_07_31_fDOM,
py$hysdict_CARI_storm5_07_31_SPC,
py$hysdict_CARI_storm5_07_31_turb,
py$hysdict_CARI_storm6a_08_02_NO3,
py$hysdict_CARI_storm6a_08_02_fDOM,
py$hysdict_CARI_storm6a_08_02_SPC,
py$hysdict_CARI_storm6a_08_02_turb,
py$hysdict_CARI_storm6b_08_03_NO3,
py$hysdict_CARI_storm6b_08_03_fDOM,
py$hysdict_CARI_storm6b_08_03_SPC,
py$hysdict_CARI_storm6b_08_03_turb,
py$hysdict_CARI_storm6c_08_05_NO3,
py$hysdict_CARI_storm6c_08_05_fDOM,
py$hysdict_CARI_storm6c_08_05_SPC,
py$hysdict_CARI_storm6c_08_05_turb,
py$hysdict_CARI_storm6d_08_10_NO3,
py$hysdict_CARI_storm6d_08_10_fDOM,
py$hysdict_CARI_storm6d_08_10_SPC,
py$hysdict_CARI_storm6d_08_10_turb,
py$hysdict_CARI_storm7a_08_13_NO3,
py$hysdict_CARI_storm7a_08_13_fDOM,
py$hysdict_CARI_storm7a_08_13_SPC,
py$hysdict_CARI_storm7a_08_13_turb,
py$hysdict_CARI_storm7b_08_13_NO3,
py$hysdict_CARI_storm7b_08_13_fDOM,
py$hysdict_CARI_storm7b_08_13_SPC,
py$hysdict_CARI_storm7b_08_13_turb,
py$hysdict_CARI_storm8_08_16_NO3,
py$hysdict_CARI_storm8_08_16_fDOM,
py$hysdict_CARI_storm8_08_16_SPC,
py$hysdict_CARI_storm8_08_16_turb)
CARI.hyst.results.list.2 = list()
for (i in 1:length(CARI.hyst.results.list)){
CARI.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
CARI.hyst.results.list[[i]][["HI_mean_with_Interp"]],
CARI.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
CARI.hyst.results.list[[i]][["Normalized slope of response"]],
CARI.hyst.results.list[[i]][["interpolated Max width of response"]],
CARI.hyst.results.list[[i]][["Min response"]],
CARI.hyst.results.list[[i]][["Max response"]],
CARI.hyst.results.list[[i]][["Peak Q"]]
))))
names(CARI.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(CARI.hyst.results.list)){
HIs.list[[i]] = unlist(CARI.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
CARI.hyst.results.list.3 =list()
for (i in 1:length(CARI.hyst.results.list)){
CARI.hyst.results.list.3[[i]] = cbind(CARI.hyst.results.list.2[[i]], HIs.tests[[i]])
}
CARI.hyst.results.df = bind_rows(CARI.hyst.results.list.3, .id = "column_label")
CARI.hyst.results.df$storm.ID = c("CARI_storm1_05_08_NO3",
"CARI_storm1_05_08_fDOM",
"CARI_storm1_05_08_SPC",
"CARI_storm1_05_08_turb",
"CARI_storm2_06_30_NO3",
"CARI_storm2_06_30_fDOM",
"CARI_storm2_06_30_SPC",
"CARI_storm2_06_30_turb",
"CARI_storm3_07_12_NO3",
"CARI_storm3_07_12_fDOM",
"CARI_storm3_07_12_SPC",
"CARI_storm3_07_12_turb",
"CARI_storm5_07_31_NO3",
"CARI_storm5_07_31_fDOM",
"CARI_storm5_07_31_SPC",
"CARI_storm5_07_31_turb",
"CARI_storm6a_08_02_NO3",
"CARI_storm6a_08_02_fDOM",
"CARI_storm6a_08_02_SPC",
"CARI_storm6a_08_02_turb",
"CARI_storm6b_08_03_NO3",
"CARI_storm6b_08_03_fDOM",
"CARI_storm6b_08_03_SPC",
"CARI_storm6b_08_03_turb",
"CARI_storm6c_08_05_NO3",
"CARI_storm6c_08_05_fDOM",
"CARI_storm6c_08_05_SPC",
"CARI_storm6c_08_05_turb",
"CARI_storm6d_08_10_NO3",
"CARI_storm6d_08_10_fDOM",
"CARI_storm6d_08_10_SPC",
"CARI_storm6d_08_10_turb",
"CARI_storm7a_08_13_NO3",
"CARI_storm7a_08_13_fDOM",
"CARI_storm7a_08_13_SPC",
"CARI_storm7a_08_13_turb",
"CARI_storm7b_08_13_NO3",
"CARI_storm7b_08_13_fDOM",
"CARI_storm7b_08_13_SPC",
"CARI_storm7b_08_13_turb",
"CARI_storm8_08_16_NO3",
"CARI_storm8_08_16_fDOM",
"CARI_storm8_08_16_SPC",
"CARI_storm8_08_16_turb")
CARI.hyst.results.df$site.ID = "CARI"
write.csv(CARI.hyst.results.df, "~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2019/CARI/CARI.hyst.results.csv")
# plot HI by normalized discharge
HIs.Q.list =list()
HIs.df.list = list()
#pdf("~/Documents/Storms/Output_from_analysis/HI_plots/2019/CARI/CARI.hyst.HI_Q.plots.pdf", width = 25, height =15, onefile=FALSE)
par(mfrow=c(4,7))
for (i in 1:length(HIs.list)) {
HIs.Q.list[[i]] = names(HIs.list[[i]])
HIs.Q.list[[i]] = (sapply(strsplit(HIs.Q.list[[i]], " "), "[[", 4))
HIs.Q.list[[i]] = as.numeric(gsub("%", "", HIs.Q.list[[i]]))
HIs.df.list[[i]] = as.data.frame(cbind(HIs.list[[i]], HIs.Q.list[[i]]))
HIs.df.list[[i]]= HIs.df.list[[i]][order(HIs.df.list[[i]][["V2"]]),]
plot(HIs.df.list[[i]][["V1"]] ~ HIs.df.list[[i]][["V2"]], type="l",
ylab="norm.response", xlab="Q intervals", main= CARI.hyst.results.df$storm.ID[i])
abline(h=0, lty=2)
}
## plot HI with bootstrapped 95% CIs around the median ##
HIs.Q.list =list()
HIs.df.list = list()
par(mfrow=c(1,1))
for (i in 1:length(HIs.list)) {
HIs.Q.list[[i]] = names(HIs.list[[i]])
HIs.Q.list[[i]] = (sapply(strsplit(HIs.Q.list[[i]], " "), "[[", 4))
HIs.Q.list[[i]] = as.numeric(gsub("%", "", HIs.Q.list[[i]]))
HIs.df.list[[i]] = as.data.frame(cbind(HIs.list[[i]], HIs.Q.list[[i]]))
HIs.df.list[[i]]= HIs.df.list[[i]][order(HIs.df.list[[i]][["V2"]]),]
names(HIs.df.list[[i]]) = c("HI", "Q_interval")
}
CARI.HI.df = bind_rows(HIs.df.list, .id = "column_label")
CARI.HI.df$storm.ID = c(rep("CARI_storm1_05_08_NO3", 50),
rep("CARI_storm1_05_08_fDOM", 50),
rep("CARI_storm1_05_08_SPC", 50),
rep("CARI_storm1_05_08_turb", 50),
rep("CARI_storm2_06_30_NO3", 50),
rep("CARI_storm2_06_30_fDOM", 50),
rep("CARI_storm2_06_30_SPC", 50),
rep("CARI_storm2_06_30_turb", 50),
rep("CARI_storm3_07_12_NO3", 50),
rep("CARI_storm3_07_12_fDOM", 50),
rep("CARI_storm3_07_12_SPC", 50),
rep("CARI_storm3_07_12_turb", 50),
rep("CARI_storm5_07_31_NO3", 50),
rep("CARI_storm5_07_31_fDOM", 50),
rep("CARI_storm5_07_31_SPC", 50),
rep("CARI_storm5_07_31_turb", 50),
rep("CARI_storm6a_08_02_NO3", 50),
rep("CARI_storm6a_08_02_fDOM", 50),
rep("CARI_storm6a_08_02_SPC", 50),
rep("CARI_storm6a_08_02_turb", 50),
rep("CARI_storm6b_08_03_NO3", 50),
rep("CARI_storm6b_08_03_fDOM", 50),
rep("CARI_storm6b_08_03_SPC", 50),
rep("CARI_storm6b_08_03_turb", 50),
rep("CARI_storm6c_08_05_NO3", 50),
rep("CARI_storm6c_08_05_fDOM", 50),
rep("CARI_storm6c_08_05_SPC", 50),
rep("CARI_storm6c_08_05_turb", 50),
rep("CARI_storm6d_08_10_NO3", 50),
rep("CARI_storm6d_08_10_fDOM", 50),
rep("CARI_storm6d_08_10_SPC", 50),
rep("CARI_storm6d_08_10_turb", 50),
rep("CARI_storm7a_08_13_NO3", 50),
rep("CARI_storm7a_08_13_fDOM", 50),
rep("CARI_storm7a_08_13_SPC", 50),
rep("CARI_storm7a_08_13_turb", 50),
rep("CARI_storm7b_08_13_NO3", 50),
rep("CARI_storm7b_08_13_fDOM", 50),
rep("CARI_storm7b_08_13_SPC", 50),
rep("CARI_storm7b_08_13_turb", 50),
rep("CARI_storm8_08_16_NO3", 49),
rep("CARI_storm8_08_16_fDOM", 50),
rep("CARI_storm8_08_16_SPC", 50),
rep("CARI_storm8_08_16_turb", 50))
CARI.HI.df$storm.ID = as.factor(CARI.HI.df$storm.ID)
CARI.HI.df = separate(data=CARI.HI.df, col=storm.ID, into=c("site.ID","storm.num", "month", "day", "response"), sep = "_", remove = F)
par(mfrow=c(1,1))
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
g0 <- ggplot(CARI.HI.df, aes(x = storm.num, y = HI, label=storm.num, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
ggsave("~/Documents/Storms_clean_repo/plots/HI_plots/2019/CARI/CARI.HI.median.boot.pdf", plot=g2, width = 8, height = 6, units ="in")
write.csv(CARI.HI.df, "~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2019/CARI/CARI.HI.df.csv")
CARI.HI.df$date <- as.Date(with(CARI.HI.df, paste(month, day, sep = "-")), "%m-%d")
CARI.HI.df$doy <- yday(CARI.HI.df$date)
g0 <- ggplot(CARI.HI.df, aes(x = doy, y = HI, label=doy, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
ggsave("~/Documents/Storms_clean_repo/plots/HI_plots/2019/CARI/CARI.HI.median.boot.doy.pdf", plot=g2, width = 8, height = 6, units ="in")
write.csv(CARI.HI.df, "~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2019/CARI/CARI.HI.df.doy.csv")
### The purpose of this script is to regress mean HI at each site per year against burn extent (percentage burned)
# and against permafrost extent (% coverage OR soil temperature profile)
# Input: HI.dat
# Step 1) import HI.dat file which is HI for individual storms in 2018-2021 across DoD sites
# Step 2) Calculate mean HI at each site for each year
# Step 3) run a linear model of mean HI against burn extent
# Step 4) run a linear model of mean HI against permafrost extent
# Output: linear model plot
# % of most recent burn #
# Poker Creek 33%
# Vault Creek: NA
# French Creek: 7.3%
# Moose Creek: 65.7%
# Stuart Creek: 67.4%
# Permafrost extent #
# Poker Creek Low
# Vault Creek: High- continuous (100%)
# French Creek: Medium
# Moose Creek: Medium
# Stuart Creek: High
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(SLOPE)
library(wesanderson)
library(ggpubr)
library(dataRetrieval)
setwd("~/Documents/Storms_clean_repo")
# Import data #
FRCH_HI_doy_df_2018 <- read_csv("~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2018/FRCH/FRCH.HI.df.doy.csv")
MOOS_HI_doy_df_2018 <- read_csv("~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2018/MOOS/MOOS.HI.df.doy.csv")
CARI_HI_doy_df_2018 <- read_csv("~/Documents/Storms_clean_repo/Output_from_analysis/03_HI_FI/2018/CARI/CARI.HI.df.doy.csv")
CARI_HI_doy_df_2018 <- CARI_HI_doy_df_2018[,-2]
HI.dat_2018 <- rbind(FRCH_HI_doy_df_2018, MOOS_HI_doy_df_2018, CARI_HI_doy_df_2018)
HI.dat_2018$year <- "2018"
HI.dat <- rbind(HI.dat_2018)
write.csv(HI.dat, "~/Documents/Storms_clean_repo/Output_from_analysis/04_Antecedent_Conditions/HI.dat.csv")
#HI.dat <- read_csv("~/Documents/Storms/Output_from_analysis/HI.dat.csv")
HI.mean<- HI.dat %>% group_by(site.ID, response, year) %>%
summarise_at(vars(HI), list(HI = median)) # takes the median by site response and year
# merged #
# By site and response
FRCH.fDOM <- subset(HI.mean, site.ID == "FRCH" & response == "fDOM")
POKE.fDOM <- subset(HI.mean, site.ID == "POKE" & response == "fDOM")
MOOS.fDOM <- subset(HI.mean, site.ID == "MOOS" & response == "fDOM")
STRT.fDOM <- subset(HI.mean, site.ID == "STRT" & response == "fDOM")
VAUL.fDOM <- subset(HI.mean, site.ID == "VAUL" & response == "fDOM")
CARI.fDOM <- subset(HI.mean, site.ID == "CARI" & response == "fDOM")
FRCH.NO3 <- subset(HI.mean, site.ID == "FRCH" & response == "NO3")
POKE.NO3 <- subset(HI.mean, site.ID == "POKE" & response == "NO3")
MOOS.NO3 <- subset(HI.mean, site.ID == "MOOS" & response == "NO3")
STRT.NO3 <- subset(HI.mean, site.ID == "STRT" & response == "NO3")
VAUL.NO3 <- subset(HI.mean, site.ID == "VAUL" & response == "NO3")
CARI.NO3 <- subset(HI.mean, site.ID == "CARI" & response == "NO3")
FRCH.fDOM$burn <- "unburned"
POKE.fDOM$burn <- "burned"
MOOS.fDOM$burn <- "burned"
STRT.fDOM$burn <- "burned"
VAUL.fDOM$burn <- "unburned"
CARI.fDOM$burn <- "burned"
FRCH.NO3$burn <- "unburned"
POKE.NO3$burn <- "burned"
MOOS.NO3$burn <- "burned"
STRT.NO3$burn <- "burned"
VAUL.NO3$burn <- "unburned"
CARI.NO3$burn <- "burned"
fdom.hi <- rbind(FRCH.fDOM, POKE.fDOM, MOOS.fDOM, STRT.fDOM, VAUL.fDOM, CARI.fDOM)
no3.hi <- rbind(FRCH.NO3, POKE.NO3, MOOS.NO3, STRT.NO3, VAUL.NO3, CARI.NO3)
fdom.hi$year <- as.character(fdom.hi$year)
no3.hi$year <- as.character(no3.hi$year)
fdom.lm <- lm(fdom.hi$HI ~ fdom.hi$burn)
no3.lm <- lm(no3.hi$HI ~ no3.hi$burn)
fdom.hi %>%
ggplot(aes(x=burn,
y=HI,
color=year))+
geom_boxplot() +
geom_smooth(method = "lm") +
ylim(-1,1) +
ggtitle("DOC") +
xlab("Catchment burned (%)") +
ylab("HI-Solute Storage")
no3.hi %>%
ggplot(aes(x=burn,
y=HI,
color=year))+
geom_boxplot() +
geom_smooth(method = "lm") +
ylim(-1,1) +
ggtitle("NO3") +
xlab("Catchment burned (%)") +
ylab("HI-Solute Storage")
# Permafrost #
FRCH.fDOM$pf <- "Moderate"
POKE.fDOM$pf <- "Moderate"
MOOS.fDOM$pf <- "Moderate"
STRT.fDOM$pf <- "High"
VAUL.fDOM$pf <- "High"
CARI.fDOM$pf <- "Moderate"
FRCH.NO3$pf <- "Moderate"
POKE.NO3$pf <- "Moderate"
MOOS.NO3$pf <- "Moderate"
STRT.NO3$pf <- "High"
VAUL.NO3$pf <- "High"
CARI.NO3$pf <- "Moderate"
pf.fdom.hi <- rbind(FRCH.fDOM, POKE.fDOM, MOOS.fDOM, STRT.fDOM, VAUL.fDOM, CARI.fDOM)
pf.no3.hi <- rbind(FRCH.NO3, POKE.NO3, MOOS.NO3, STRT.NO3, VAUL.NO3, CARI.NO3)
pf.fdom.hi$year <- as.character(pf.fdom.hi$year)
pf.no3.hi$year <- as.character(pf.no3.hi$year)
pf.fdom.lm <- lm(pf.fdom.hi$HI ~ pf.fdom.hi$burn)
pf.no3.lm <- lm(pf.no3.hi$HI ~ pf.no3.hi$burn)
pf.fdom.hi %>%
ggplot(aes(x=pf,
y=HI,
color=year))+
geom_boxplot() +
geom_smooth(method = "lm") +
ylim(-1,1) +
ggtitle("DOC") +
xlab("Permafrost Extent (%)") +
ylab("HI-Solute Storage")
pf.no3.hi %>%
ggplot(aes(x=pf,
y=HI,
color=year))+
geom_boxplot() +
geom_smooth(method = "lm") +
ylim(-1,1) +
ggtitle("NO3") +
xlab("Permafrost Extent (%)") +
ylab("HI-Solute Storage")
### H 1.1: HI against precip ###
HI.mean.precip <- HI.dat %>% group_by(site.ID, year, storm.num) %>%
summarise_at(vars(HI), list(HI = median)) # take mean by site response and year
HI.mean.precip.response <- HI.dat %>% group_by(site.ID, year, storm.num, response) %>%
summarise_at(vars(HI), list(HI = median)) # take mean by site response and year
library(readr)
airtempmean <- read_csv("Climate/airtempmean.csv")
View(airtempmean)
rm(airtempmean)
FRCH_RainGauge_2019 <- read_csv("~/Documents/DoD_2019/RainGauge/FRCH.RainGauge.2019.csv")
POKE_RainGauge_2019 <- read_csv("~/Documents/DoD_2019/RainGauge/POKE.RainGauge.2019.csv")
VAUL_RainGauge_2019 <- read_csv("~/Documents/DoD_2019/RainGauge/VAUL.RainGauge.2019.csv")
airtempmean <- read_csv("~/Documents/Storms_clean_repo/Climate/airtempmean.csv")
# convert to AK time
attributes(FRCH_RainGauge_2019$Datetime)$tzone <- 'America/Anchorage'
attributes(POKE_RainGauge_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(VAUL_RainGauge_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(airtempmean$date_timeAK)$tzone <- 'America/Anchorage'
names(airtempmean)[2] <- "DateTime"
# round to nearest 15 min
FRCH_RainGauge_2019$DateTime <- lubridate::floor_date(FRCH_RainGauge_2019$Datetime, "15 minutes")
POKE_RainGauge_2019$DateTime <- lubridate::floor_date(POKE_RainGauge_2019$DateTime, "15 minutes")
VAUL_RainGauge_2019$DateTime <- lubridate::floor_date(VAUL_RainGauge_2019$DateTime, "15 minutes")
# MOOS #
MOOSstorm_file_list <- list.files(path="~/Documents/Storms_clean_repo/Storm_Events/2019/All_Sites/",
recursive=F,
pattern="MOOS",
full.names=TRUE)
MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list,
read.csv,
check.names = FALSE,
stringsAsFactors=FALSE,
header=T, blank.lines.skip = TRUE, fill=TRUE))
View(MOOS_storms)
MOOS_storms$storm.num = c(rep("storm1", 702),
rep("storm3", 250),
rep("storm4", 256),
rep("storm5", 266),
rep("storm6a", 114),
rep("storm6b", 95),
rep("storm6c", 223),
rep("storm6d", 479),
rep("storm7a", 166),
rep("storm7b", 84),
rep("storm7c", 430),
rep("storm8", 174),
rep("storm9", 530))
# MOOS #
MOOSstorm_file_list <- list.files(path="~/Documents/Storms_clean_repo/Storm_Events/2019/All_Sites/",
recursive=F,
pattern="MOOS",
full.names=TRUE)
MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list,
read.csv,
check.names = FALSE,
stringsAsFactors=FALSE,
header=T, blank.lines.skip = TRUE, fill=TRUE))
MOOS_storms$storm.num = c(rep("storm1", 702),
rep("storm3", 250),
rep("storm4", 256),
rep("storm5", 266),
rep("storm6a", 114),
rep("storm6b", 95),
rep("storm6c", 223),
rep("storm6d", 479),
rep("storm7a", 166),
rep("storm7b", 84),
rep("storm7c", 430),
rep("storm8", 174),
rep("storm9", 530))
MOOS_storms$DateTime <- as.POSIXct(MOOS_storms$DateTime, tz = "America/Anchorage", format = "%Y-%m-%d %H:%M")
MOOS.2019.storms.1<- left_join(MOOS_storms, FRCH_RainGauge_2019, by = "DateTime")
MOOS.2019.storms.1<- left_join(MOOS.2019.storms.1, airtempmean, by = "DateTime")
names(MOOS.2019.storms.1)[names(MOOS.2019.storms.1) == ''] <- 'x'
MOOS.2019.per.storm.1 <- MOOS.2019.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(inst_rainfall_mm), list(precip = sum), na.rm = TRUE)
temp <- MOOS.2019.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(airtemp_100.1000cm_mean), list(temp = mean), na.rm = TRUE) # finding the mean temperature for each storm event
MOOS.2019.per.storm.1$temp <- temp$temp
MOOS_storms$DateTime <- as.POSIXct(MOOS_storms$DateTime, tz = "America/Anchorage", format = "%Y-%m-%d %H:%M")
MOOS.2019.storms.1<- left_join(MOOS_storms, FRCH_RainGauge_2019, by = "DateTime")
MOOS.2019.storms.1<- left_join(MOOS.2019.storms.1, airtempmean, by = "DateTime")
names(MOOS.2019.storms.1)[names(MOOS.2019.storms.1) == ''] <- 'x'
MOOS.2019.per.storm.1 <- MOOS.2019.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(inst_rainfall_mm), list(precip = sum), na.rm = TRUE)
temp <- MOOS.2019.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(airtemp_100.1000cm_mean), list(temp = mean), na.rm = TRUE) # finding the mean temperature for each storm event
