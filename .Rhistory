rep("storm4", 115),
rep("storm5a", 327),
rep("storm5c", 111),
rep("storm5d", 99),
rep("storm6a", 283),
rep("storm7", 235),
rep("storm8", 95),
rep("storm9", 211))
names(POKE_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
POKE_SPC_storm$site.ID <- "POKE"
POKE_SPC_storm[cols] <- log(POKE_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_SPC_storm <- POKE_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_SPC_storm_ascending <- filter(POKE_SPC_storm, limb == "ascending")
POKE_SPC_storm_ascending <- POKE_SPC_storm_ascending[is.finite(POKE_SPC_storm_ascending$Q.norm) & is.finite(POKE_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.poke.with.all <- POKE_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_SPC_storm$storm.ID = c(rep("storm1", 638),
rep("storm2", 274),
rep("storm3a", 1035),
rep("storm3b", 286),
rep("storm3c", 174),
rep("storm4", 466),
rep("storm5", 98),
rep("storm6", 246),
rep("storm7", 246),
rep("storm7b", 266),
rep("storm7c", 258))
names(STRT_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
STRT_SPC_storm$site.ID <- "STRT"
STRT_SPC_storm[cols] <- log(STRT_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_SPC_storm <- STRT_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_SPC_storm_ascending <- filter(STRT_SPC_storm, limb == "ascending")
STRT_SPC_storm_ascending <- STRT_SPC_storm_ascending[is.finite(STRT_SPC_storm_ascending$Q.norm) & is.finite(STRT_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.strt <- STRT_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_SPC_storm$storm.ID = c(rep("storm1", 191),
rep("storm2", 207),
rep("storm3", 191),
rep("storm4a", 307),
rep("storm4c", 227),
rep("storm5", 275),
rep("storm6", 263),
rep("storm7", 107),
rep("storm8a", 455),
rep("storm8c", 191))
names(VAUL_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
VAUL_SPC_storm$site.ID <- "VAUL"
VAUL_SPC_storm[cols] <- log(VAUL_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_SPC_storm <- VAUL_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_SPC_storm_ascending <- filter(VAUL_SPC_storm, limb == "ascending")
VAUL_SPC_storm_ascending <- VAUL_SPC_storm_ascending[is.finite(VAUL_SPC_storm_ascending$Q.norm) & is.finite(VAUL_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.vaul <- VAUL_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_SPC_storm$storm.ID = c(rep("storm1", 371),
rep("storm2", 143),
rep("storm3", 83),
rep("storm4", 147),
rep("storm5", 135),
rep("storm6a", 319),
rep("storm6c", 481),
rep("storm6d", 129),
rep("storm7a", 271),
rep("storm8", 267))
names(CARI_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
CARI_SPC_storm$site.ID <- "CARI"
CARI_SPC_storm[cols] <- log(CARI_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_SPC_storm <- CARI_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_SPC_storm_ascending <- filter(CARI_SPC_storm, limb == "ascending")
CARI_SPC_storm_ascending <- CARI_SPC_storm_ascending[is.finite(CARI_SPC_storm_ascending$Q.norm) & is.finite(CARI_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.cari <- CARI_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_SPC_storm_ascending$DateTime <- as.POSIXct(FRCH_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_SPC_storm_ascending$DateTime <- as.POSIXct(MOOS_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_SPC_storm_ascending$DateTime <- as.POSIXct(STRT_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_SPC_storm_ascending$DateTime <- as.POSIXct(VAUL_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
CARI_SPC_storm_ascending$DateTime <- as.POSIXct(CARI_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_SPC_storm_ascending$DateTime <- as.POSIXct(POKE_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_SPC_storm <- rbind(FRCH_SPC_storm_ascending, MOOS_SPC_storm_ascending,
STRT_SPC_storm_ascending, VAUL_SPC_storm_ascending,
CARI_SPC_storm_ascending, POKE_SPC_storm_ascending)
beta.all.SPC <- All_SPC_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
beta.all.SPC$response_var <- "SPC"
all.2019.ci.SPC <- All_SPC_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(SPC.norm ~ Q.norm, data = .x)))
all.2019.ci.SPC$response_var <- "SPC"
FRCH_turb_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_turb_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_turb_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_turb_storm_list_beta, inner_join, by = "valuedatetime")
POKE_turb_storm <- map2_df(POKE_Q_storm_list_beta, POKE_turb_storm_list_beta, inner_join, by = "valuedatetime")
STRT_turb_storm <- map2_df(STRT_Q_storm_list_beta, STRT_turb_storm_list_beta, inner_join, by = "valuedatetime")
VAUL_turb_storm <- map2_df(VAUL_Q_storm_list_beta, VAUL_turb_storm_list_beta, inner_join, by = "valuedatetime")
CARI_turb_storm <- map2_df(CARI_Q_storm_list_beta, CARI_turb_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_turb_storm$storm.ID = c(rep("storm1", 993),
rep("storm10a", 425),
rep("storm11", 479),
rep("storm12a", 183),
rep("storm12c", 1375),
rep("storm13", 391),
rep("storm14", 631),
rep("storm2", 165),
rep("storm3", 201),
rep("storm4", 193),
rep("storm5", 133),
rep("storm6", 289))
names(FRCH_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
FRCH_turb_storm$site.ID <- "FRCH"
cols <- c("turb.norm","Q.norm")
FRCH_turb_storm[cols] <- log(FRCH_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_turb_storm <- FRCH_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_turb_storm_ascending <- filter(FRCH_turb_storm, limb == "ascending")
FRCH_turb_storm_ascending <- FRCH_turb_storm_ascending[is.finite(FRCH_turb_storm_ascending$Q.norm) & is.finite(FRCH_turb_storm_ascending$turb.norm), ]
beta.all.turb <- FRCH_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_turb_storm$storm.ID = c(rep("storm1", 702),
rep("storm3", 250),
rep("storm4", 228),
rep("storm5", 266),
rep("storm6a", 434),
rep("storm6d", 479),
rep("storm7a", 166),
rep("storm7b", 84),
rep("storm7c", 430),
rep("storm8", 174),
rep("storm9", 530))
names(MOOS_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
MOOS_turb_storm$site.ID <- "MOOS"
MOOS_turb_storm[cols] <- log(MOOS_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_turb_storm <- MOOS_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_turb_storm_ascending <- filter(MOOS_turb_storm, limb == "ascending")
MOOS_turb_storm_ascending <- MOOS_turb_storm_ascending[is.finite(MOOS_turb_storm_ascending$Q.norm) & is.finite(MOOS_turb_storm_ascending$turb.norm), ]
beta.all.turb.moos.with.all <- MOOS_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# POKE #
POKE_turb_storm$storm.ID = c(rep("storm1", 103),
rep("storm2", 91),
rep("storm3", 147),
rep("storm4", 115),
rep("storm5a", 327),
rep("storm5c", 111),
rep("storm5d", 99),
rep("storm6a", 283),
rep("storm7", 235),
rep("storm8", 95),
rep("storm9", 211))
names(POKE_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
POKE_turb_storm$site.ID <- "POKE"
POKE_turb_storm[cols] <- log(POKE_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_turb_storm <- POKE_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_turb_storm_ascending <- filter(POKE_turb_storm, limb == "ascending")
POKE_turb_storm_ascending <- POKE_turb_storm_ascending[is.finite(POKE_turb_storm_ascending$Q.norm) & is.finite(POKE_turb_storm_ascending$turb.norm), ]
beta.all.poke.moos.with.all <- POKE_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_turb_storm$storm.ID = c(rep("storm1", 638),
rep("storm2", 274),
rep("storm3a", 1035),
rep("storm3b", 286),
rep("storm3c", 174),
rep("storm4", 466),
rep("storm5", 98),
rep("storm6", 246),
rep("storm7", 246),
rep("storm7b", 266),
rep("storm7c", 258))
names(STRT_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
STRT_turb_storm$site.ID <- "STRT"
STRT_turb_storm[cols] <- log(STRT_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_turb_storm <- STRT_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_turb_storm_ascending <- filter(STRT_turb_storm, limb == "ascending")
STRT_turb_storm_ascending <- STRT_turb_storm_ascending[is.finite(STRT_turb_storm_ascending$Q.norm) & is.finite(STRT_turb_storm_ascending$turb.norm), ]
beta.all.turb.strt <- STRT_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_turb_storm$storm.ID = c(rep("storm1", 191),
rep("storm2", 207),
rep("storm3", 191),
rep("storm4a", 307),
rep("storm4c", 227),
rep("storm5", 275),
rep("storm6", 263),
rep("storm7", 107),
rep("storm8a", 455),
rep("storm8c", 191))
names(VAUL_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
VAUL_turb_storm$site.ID <- "VAUL"
VAUL_turb_storm[cols] <- log(VAUL_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_turb_storm <- VAUL_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_turb_storm_ascending <- filter(VAUL_turb_storm, limb == "ascending")
VAUL_turb_storm_ascending <- VAUL_turb_storm_ascending[is.finite(VAUL_turb_storm_ascending$Q.norm) & is.finite(VAUL_turb_storm_ascending$turb.norm), ]
beta.all.turb.vaul <- VAUL_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_turb_storm$storm.ID = c(rep("storm1", 371),
rep("storm2", 143),
rep("storm3", 83),
rep("storm4", 147),
rep("storm5", 135),
rep("storm6a", 319),
rep("storm6c", 481),
rep("storm6d", 129),
rep("storm7a", 271),
rep("storm8", 267))
names(CARI_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
CARI_turb_storm$site.ID <- "CARI"
CARI_turb_storm[cols] <- log(CARI_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_turb_storm <- CARI_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_turb_storm_ascending <- filter(CARI_turb_storm, limb == "ascending")
CARI_turb_storm_ascending <- CARI_turb_storm_ascending[is.finite(CARI_turb_storm_ascending$Q.norm) & is.finite(CARI_turb_storm_ascending$turb.norm), ]
beta.all.turb.cari <- CARI_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_turb_storm_ascending$DateTime <- as.POSIXct(FRCH_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_turb_storm_ascending$DateTime <- as.POSIXct(MOOS_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_turb_storm_ascending$DateTime <- as.POSIXct(STRT_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_turb_storm_ascending$DateTime <- as.POSIXct(VAUL_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
CARI_turb_storm_ascending$DateTime <- as.POSIXct(CARI_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_turb_storm_ascending$DateTime <- as.POSIXct(POKE_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_turb_storm <- rbind(FRCH_turb_storm_ascending, MOOS_turb_storm_ascending,
STRT_turb_storm_ascending, VAUL_turb_storm_ascending,
CARI_turb_storm_ascending, POKE_turb_storm_ascending)
beta.all.turb <- All_turb_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
beta.all.turb$response_var <- "turb"
all.2019.ci.turb <- All_turb_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(turb.norm ~ Q.norm, data = .x)))
all.2019.ci.turb$response_var <- "turb"
FRCH_abs_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_abs_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_abs_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_abs_storm_list_beta, inner_join, by = "valuedatetime")
POKE_abs_storm <- map2_df(POKE_Q_storm_list_beta, POKE_abs_storm_list_beta, inner_join, by = "valuedatetime")
STRT_abs_storm <- map2_df(STRT_Q_storm_list_beta, STRT_abs_storm_list_beta, inner_join, by = "valuedatetime")
VAUL_abs_storm <- map2_df(VAUL_Q_storm_list_beta, VAUL_abs_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_abs_storm$storm.ID = c(rep("storm1", 993),
rep("storm10a", 425),
rep("storm11", 479),
rep("storm12a", 183),
rep("storm12c", 1375),
rep("storm13", 391),
rep("storm14", 631),
rep("storm2", 165),
rep("storm3", 201),
rep("storm4", 193),
rep("storm5", 133),
rep("storm6", 289))
names(FRCH_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
FRCH_abs_storm$site.ID <- "FRCH"
cols <- c("abs.norm","Q.norm")
FRCH_abs_storm[cols] <- log(FRCH_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_abs_storm <- FRCH_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_abs_storm_ascending <- filter(FRCH_abs_storm, limb == "ascending")
FRCH_abs_storm_ascending <- FRCH_abs_storm_ascending[is.finite(FRCH_abs_storm_ascending$Q.norm) & is.finite(FRCH_abs_storm_ascending$abs.norm), ]
beta.all.abs <- FRCH_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_abs_storm$storm.ID = c(rep("storm1", 702),
rep("storm3", 250),
rep("storm4", 228),
rep("storm5", 266),
rep("storm6a", 434),
rep("storm6d", 479),
rep("storm7a", 166),
rep("storm7b", 84),
rep("storm7c", 430),
rep("storm8", 174),
rep("storm9", 530))
names(MOOS_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
MOOS_abs_storm$site.ID <- "MOOS"
MOOS_abs_storm[cols] <- log(MOOS_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_abs_storm <- MOOS_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_abs_storm_ascending <- filter(MOOS_abs_storm, limb == "ascending")
MOOS_abs_storm_ascending <- MOOS_abs_storm_ascending[is.finite(MOOS_abs_storm_ascending$Q.norm) & is.finite(MOOS_abs_storm_ascending$abs.norm), ]
beta.all.abs.moos.with.all <- MOOS_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# POKE #
POKE_abs_storm$storm.ID = c(rep("storm1", 103),
rep("storm2", 91),
rep("storm3", 147),
rep("storm4", 115),
rep("storm5a", 327),
rep("storm5c", 111),
rep("storm5d", 99),
rep("storm6a", 283),
rep("storm7", 235),
rep("storm8", 95),
rep("storm9", 211))
names(POKE_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
POKE_abs_storm$site.ID <- "POKE"
POKE_abs_storm[cols] <- log(POKE_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_abs_storm <- POKE_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_abs_storm_ascending <- filter(POKE_abs_storm, limb == "ascending")
POKE_abs_storm_ascending <- POKE_abs_storm_ascending[is.finite(POKE_abs_storm_ascending$Q.norm) & is.finite(POKE_abs_storm_ascending$abs.norm), ]
beta.all.poke.moos.with.all <- POKE_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_abs_storm$storm.ID = c(rep("storm1", 638),
rep("storm2", 274),
rep("storm3a", 1035),
rep("storm3b", 286),
rep("storm3c", 174),
rep("storm4", 466),
rep("storm5", 98),
rep("storm6", 246),
rep("storm7", 246),
rep("storm7b", 266),
rep("storm7c", 258))
names(STRT_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
STRT_abs_storm$site.ID <- "STRT"
STRT_abs_storm[cols] <- log(STRT_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_abs_storm <- STRT_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_abs_storm_ascending <- filter(STRT_abs_storm, limb == "ascending")
STRT_abs_storm_ascending <- STRT_abs_storm_ascending[is.finite(STRT_abs_storm_ascending$Q.norm) & is.finite(STRT_abs_storm_ascending$abs.norm), ]
beta.all.abs.strt <- STRT_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_abs_storm$storm.ID = c(rep("storm1", 191),
rep("storm2", 207),
rep("storm3", 191),
rep("storm4a", 307),
rep("storm4c", 227),
rep("storm5", 275),
rep("storm6", 263),
rep("storm7", 107),
rep("storm8a", 455),
rep("storm8c", 191))
names(VAUL_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
VAUL_abs_storm$site.ID <- "VAUL"
VAUL_abs_storm[cols] <- log(VAUL_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_abs_storm <- VAUL_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_abs_storm_ascending <- filter(VAUL_abs_storm, limb == "ascending")
VAUL_abs_storm_ascending <- VAUL_abs_storm_ascending[is.finite(VAUL_abs_storm_ascending$Q.norm) & is.finite(VAUL_abs_storm_ascending$abs.norm), ]
beta.all.abs.vaul <- VAUL_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_abs_storm_ascending$DateTime <- as.POSIXct(FRCH_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_abs_storm_ascending$DateTime <- as.POSIXct(MOOS_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_abs_storm_ascending$DateTime <- as.POSIXct(STRT_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_abs_storm_ascending$DateTime <- as.POSIXct(VAUL_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_abs_storm_ascending$DateTime <- as.POSIXct(POKE_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_abs_storm <- rbind(FRCH_abs_storm_ascending, MOOS_abs_storm_ascending,
STRT_abs_storm_ascending, VAUL_abs_storm_ascending,
POKE_abs_storm_ascending)
beta.all.abs <- All_abs_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
beta.all.abs$response_var <- "abs"
all.2019.ci.abs <- All_abs_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(abs.norm ~ Q.norm, data = .x)))
all.2019.ci.abs$response_var <- "abs"
beta.all.2019 <- rbind(all.2019.ci.no3, all.2019.ci.fDOM,
all.2019.ci.SPC, all.2019.ci.turb,
all.2019.ci.abs)
write.csv(here("Storms_clean_repo", "Output_from_analysis", "06_BETA", "beta.2019.csv"))
# write.csv(beta.all.2019, "~/Documents/Storms_clean_repo/Output_from_analysis/06_BETA/beta.2019.csv")
write.csv(beta.all.2019, here("Output_from_analysis", "06_BETA", "beta.2019.csv"))
