HI.frch.no3.2022 <- left_join(HI.frch.no3.2022, FRCH.2022.per.storm.2, by = "storm.num")
HI.frch.no3.2022 <- left_join(HI.frch.no3.2022, FRCH.2022.per.storm.3, by = "storm.num")
HI.frch.no3.2022 <- left_join(HI.frch.no3.2022, FRCH.2022.per.storm.4, by = "storm.num")
#HI.frch.no3.2022 <- left_join(HI.frch.no3.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.no3 <- lm(HI.frch.no3.2022$HI ~ HI.frch.no3.2022$precip) # model one with just total precip
frch.lm.no3.2 <- lm(HI.frch.no3.2022$HI ~ HI.frch.no3.2022$precip.week) # model one with just total precip
frch.lm.no3.3 <- lm(HI.frch.no3.2022$HI ~ HI.frch.no3.2022$precip.month) # model one with just total precip
frch.lm.no3.4 <- lm(HI.frch.no3.2022$HI ~ HI.frch.no3.2022$ThreeMonth) # model one with just total precip
# fDOM #
HI.frch.fDOM.2022 <- left_join(HI.mean.precip.frch.fDOM, FRCH.2022.per.storm.1, by = "storm.num")
HI.frch.fDOM.2022 <- left_join(HI.frch.fDOM.2022, FRCH.2022.per.storm.2, by = "storm.num")
HI.frch.fDOM.2022 <- left_join(HI.frch.fDOM.2022, FRCH.2022.per.storm.3, by = "storm.num")
HI.frch.fDOM.2022 <- left_join(HI.frch.fDOM.2022, FRCH.2022.per.storm.4, by = "storm.num")
#HI.frch.fDOM.2021 <- left_join(HI.frch.fDOM.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.fDOM <- lm(HI.frch.fDOM.2022$HI ~ HI.frch.fDOM.2022$precip) # model one with just total precip
frch.lm.fDOM.2 <- lm(HI.frch.fDOM.2022$HI ~ HI.frch.fDOM.2022$precip.week) # model one with just total precip
frch.lm.fDOM.3 <- lm(HI.frch.fDOM.2022$HI ~ HI.frch.fDOM.2022$precip.month) # model one with just total precip
frch.lm.fDOM.4 <- lm(HI.frch.fDOM.2022$HI ~ HI.frch.fDOM.2022$ThreeMonth) # model one with just total precip
#frch.lm.fDOM.5 <- lm(HI.frch.fDOM.2022$HI ~ HI.frch.fDOM.2022$temp.week) # model one with just total precip
# SPC #
HI.frch.SPC.2022 <- left_join(HI.mean.precip.frch.SPC, FRCH.2022.per.storm.1, by = "storm.num")
HI.frch.SPC.2022 <- left_join(HI.frch.SPC.2022, FRCH.2022.per.storm.2, by = "storm.num")
HI.frch.SPC.2022 <- left_join(HI.frch.SPC.2022, FRCH.2022.per.storm.3, by = "storm.num")
HI.frch.SPC.2022 <- left_join(HI.frch.SPC.2022, FRCH.2022.per.storm.4, by = "storm.num")
#HI.frch.SPC.2021 <- left_join(HI.frch.SPC.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.SPC <- lm(HI.frch.SPC.2022$HI ~ HI.frch.SPC.2022$precip) # model one with just total precip
frch.lm.SPC.2 <- lm(HI.frch.SPC.2022$HI ~ HI.frch.SPC.2022$precip.week) # model one with just total precip
frch.lm.SPC.3 <- lm(HI.frch.SPC.2022$HI ~ HI.frch.SPC.2022$precip.month) # model one with just total precip
frch.lm.SPC.4 <- lm(HI.frch.SPC.2022$HI ~ HI.frch.SPC.2022$ThreeMonth) # model one with just total precip
#frch.lm.SPC.5 <- lm(HI.frch.SPC.2022$HI ~ HI.frch.SPC.2022$temp.week) # model one with just total precip
# turb #
HI.frch.turb.2022 <- left_join(HI.mean.precip.frch.turb, FRCH.2022.per.storm.1, by = "storm.num")
HI.frch.turb.2022 <- left_join(HI.frch.turb.2022, FRCH.2022.per.storm.2, by = "storm.num")
HI.frch.turb.2022 <- left_join(HI.frch.turb.2022, FRCH.2022.per.storm.3, by = "storm.num")
HI.frch.turb.2022 <- left_join(HI.frch.turb.2022, FRCH.2022.per.storm.4, by = "storm.num")
#HI.frch.turb.2021 <- left_join(HI.frch.turb.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.turb <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$precip) # model one with just total precip
frch.lm.turb.2 <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$precip.week) # model one with just total precip
frch.lm.turb.3 <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$precip.month) # model one with just total precip
frch.lm.turb.4 <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$ThreeMonth) # model one with just total precip
#frch.lm.turb.5 <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$temp.week) # model one with just total precip
# abs #
HI.frch.abs.2022 <- left_join(HI.mean.precip.frch.abs, FRCH.2022.per.storm.1, by = "storm.num")
HI.frch.abs.2022 <- left_join(HI.frch.abs.2022, FRCH.2022.per.storm.2, by = "storm.num")
HI.frch.abs.2022 <- left_join(HI.frch.abs.2022, FRCH.2022.per.storm.3, by = "storm.num")
HI.frch.abs.2022 <- left_join(HI.frch.abs.2022, FRCH.2022.per.storm.4, by = "storm.num")
#HI.frch.abs.2021 <- left_join(HI.frch.abs.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.abs <- lm(HI.frch.abs.2022$HI ~ HI.frch.abs.2022$precip) # model one with just total precip
frch.lm.abs.2 <- lm(HI.frch.abs.2022$HI ~ HI.frch.abs.2022$precip.week) # model one with just total precip
frch.lm.abs.3 <- lm(HI.frch.abs.2022$HI ~ HI.frch.abs.2022$precip.month) # model one with just total precip
frch.lm.abs.4 <- lm(HI.frch.abs.2022$HI ~ HI.frch.abs.2022$ThreeMonth) # model one with just total precip
#frch.lm.abs.5 <- lm(HI.frch.turb.2022$HI ~ HI.frch.turb.2022$temp.week) # model one with just total precip
# this would be for intensity but we are not doing this right now if just comparing to the DOD stuff
# sum.time <- FRCH.2018.storms.1 %>%
#   mutate(grp=data.table::rleid(storm.num))%>%
#   group_by(grp) %>%
#   summarise(storm.num=max(storm.num),TOTAL.TIME=difftime(max(DateTime),
#                                                          min(DateTime),units="hour"))%>%
#   group_by(storm.num) %>%
#   summarise(TOTAL.TIME=sum(TOTAL.TIME)) # creating a total time column for each individual storm and then I can generate an intensity metric which would be TotalPrecip/duration of event
#
# HI.frch.fDOM.2.2018 <- left_join(HI.frch.fDOM.2018, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
# HI.frch.fDOM.2.2018$TOTAL.TIME <- as.numeric(HI.frch.fDOM.2.2018$TOTAL.TIME)
# HI.frch.fDOM.2.2018$Intensity <- HI.frch.fDOM.2.2018$precip/HI.frch.fDOM.2.2018$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
#
# frch.lm.fDOM.2 <- lm(HI.frch.fDOM.2.2018$HI ~ HI.frch.fDOM.2.2018$precip + HI.frch.fDOM.2.2018$Intensity) # model one with total precip and intensity
#
# br <- HI.frch.fDOM.2.2018 %>%
#   ggplot(aes(x=Intensity,
#              y=HI)) +
#   geom_point() +
#   geom_smooth(method = "lm") +
#   stat_poly_eq(formula = frch.formula,
#                aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
#                parse = TRUE) +
#   ggtitle("FRCH fDOM") +
#   xlab("Intensity (mm/hr)") +
#   ylab("HI-Solute Storage") +
#   theme_classic() # plot model
#
# HI.frch.SPC.2.2018 <- left_join(HI.frch.SPC.2018, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
# HI.frch.SPC.2.2018$TOTAL.TIME <- as.numeric(HI.frch.SPC.2.2018$TOTAL.TIME)
# HI.frch.SPC.2.2018$Intensity <- HI.frch.SPC.2.2018$precip/HI.frch.SPC.2.2018$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
#
# frch.lm.SPC.2 <- lm(HI.frch.SPC.2.2018$HI ~ HI.frch.SPC.2.2018$precip + HI.frch.SPC.2.2018$Intensity) # model one with total precip and intensity
#
# HI.frch.turb.2.2018 <- left_join(HI.frch.turb.2018, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
# HI.frch.turb.2.2018$TOTAL.TIME <- as.numeric(HI.frch.turb.2.2018$TOTAL.TIME)
# HI.frch.turb.2.2018$Intensity <- HI.frch.turb.2.2018$precip/HI.frch.turb.2.2018$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
#
# frch.lm.turb.2 <- lm(HI.frch.turb.2.2018$HI ~ HI.frch.turb.2.2018$precip + HI.frch.turb.2.2018$Intensity) # model one with total precip and intensity
# day of year # SEASONALITY
FRCH.2022.1$day <- julian(FRCH.2022.1$datetimeAK, origin = as.POSIXct('2022-01-01', tz = 'America/Anchorage')) # making a fractional day column
FRCH.2022.1$day <- as.numeric(FRCH.2022.1$day)
FRCH.2022.per.storm.5 <- FRCH.2022.1 %>% group_by(storm.num) %>%
summarise_at(vars(day), list(doy = first), na.rm = TRUE) # grouping 3 month precip leading up to a storm
HI.frch.fDOM.2.2022 <- left_join(HI.frch.fDOM.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.fDOM.5 <- lm(HI.frch.fDOM.2.2022$HI ~ HI.frch.fDOM.2.2022$doy)
# HI.salcha.fDOM.2.2021 %>%
#   ggplot(aes(x=doy,
#              y=HI)) +
#   geom_point() +
#   geom_smooth(method = "lm") +
#   stat_poly_eq(formula = salcha.formula,
#                aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
#                parse = TRUE) +
#   ggtitle("SALCHA fDOM") +
#   xlab("Day of year") +
#   ylab("HI-Solute Storage") +
#   theme_classic() # plot model
HI.frch.SPC.2.2022 <- left_join(HI.frch.SPC.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.SPC.5 <- lm(HI.frch.SPC.2.2022$HI ~ HI.frch.SPC.2.2022$doy)
HI.frch.turb.2.2022 <- left_join(HI.frch.turb.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.turb.5 <- lm(HI.frch.turb.2.2022$HI ~ HI.frch.turb.2.2022$doy)
HI.frch.no3.2.2022 <- left_join(HI.frch.no3.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.no3.5 <- lm(HI.frch.no3.2.2022$HI ~ HI.frch.no3.2.2022$doy)
HI.frch.abs.2.2022 <- left_join(HI.frch.abs.2022, FRCH.2022.per.storm.5, by = "storm.num")
frch.lm.abs.5 <- lm(HI.frch.turb.2.2022$HI ~ HI.frch.turb.2.2022$doy)
HI.frch.2022 <- rbind(HI.frch.no3.2.2022, HI.frch.fDOM.2.2022, HI.frch.SPC.2.2022, HI.frch.turb.2.2022, HI.frch.abs.2.2022) # merging all responses together
HI.frch.2022$date <- as.Date(HI.frch.2022$doy, origin = "2022-01-01")
origin_date <- as.Date("2022-05-13")
HI.frch.2022$TimeSinceChena <- julian(HI.frch.2022$date, origin_date)
write.csv(HI.frch.2022, here("Output_from_analysis", "04_Antecedent_Conditions", "2022", "HI.frch.2022.csv"))
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(SLOPE)
library(wesanderson)
library(ggpubr)
library(dataRetrieval)
storm_file_list_beta <- list.files(path="FRCH_MOOS_VAUL_POKE_STRT_CARI/",
recursive=F,
pattern=".csv",
full.names=TRUE)
storm_list_beta<-do.call("list", lapply(storm_file_list_beta,
read.csv,
stringsAsFactors=FALSE,
header=T, row.names=1))
storm_file_list_beta = sub("FRCH_MOOS_VAUL_POKE_STRT_CARI//", storm_file_list_beta, replacement = "")
# storm_file_list_beta = sub("~/Documents/Storms_clean_repo/Storm_Events/2022/FRCH_MOOS_VAUL_POKE_STRT_CARI//", storm_file_list_beta, replacement = "")
storm_file_list_beta = sub(".csv", storm_file_list_beta, replacement = "")
names(storm_list_beta) = storm_file_list_beta
for(i in 1:length(storm_list_beta)){
storm_list_beta[[i]][["valuedatetime"]] = as.POSIXct(storm_list_beta[[i]][["valuedatetime"]],
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
} # changing character format into datetime
FRCH_storm_list_beta = storm_list_beta[c(46:69)] #24
FRCH_NO3_storm_list_beta = FRCH_storm_list_beta[c(grep("NO3", names(FRCH_storm_list_beta)))]
FRCH_fDOM_storm_list_beta = FRCH_storm_list_beta[c(grep("fDOM", names(FRCH_storm_list_beta)))]
FRCH_SpCond_storm_list_beta = FRCH_storm_list_beta[c(grep("SPC", names(FRCH_storm_list_beta)))]
FRCH_turb_storm_list_beta = FRCH_storm_list_beta[c(grep("turb", names(FRCH_storm_list_beta)))]
FRCH_abs_storm_list_beta = FRCH_storm_list_beta[c(grep("abs", names(FRCH_storm_list_beta)))]
FRCH_Q_storm_list_beta = FRCH_storm_list_beta[c(grep("Q", names(FRCH_storm_list_beta)))]
# normalize Q data
# FRCH
for(i in 1:length(FRCH_Q_storm_list_beta)){
FRCH_Q_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_Q_storm_list_beta[[i]][["datavalue"]]-min(FRCH_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
# normalize solute data
#
#NO3
for(i in 1:length(FRCH_NO3_storm_list_beta)){
FRCH_NO3_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_NO3_storm_list_beta[[i]][["datavalue"]]-min(FRCH_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
#fDOM
for(i in 1:length(FRCH_fDOM_storm_list_beta)){
FRCH_fDOM_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_fDOM_storm_list_beta[[i]][["datavalue"]]-min(FRCH_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
#SPC
for(i in 1:length(FRCH_SpCond_storm_list_beta)){
FRCH_SpCond_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_SpCond_storm_list_beta[[i]][["datavalue"]]-min(FRCH_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
#Turb
for(i in 1:length(FRCH_turb_storm_list_beta)){
FRCH_turb_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_turb_storm_list_beta[[i]][["datavalue"]]-min(FRCH_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
#abs
for(i in 1:length(FRCH_abs_storm_list_beta)){
FRCH_abs_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_abs_storm_list_beta[[i]][["datavalue"]]-min(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
FRCH_NO3_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_NO3_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_NO3_storm$storm.ID = c(rep("storm1", 219),
rep("storm2", 235),
rep("storm3", 223),
rep("storm4", 167))
library(xfun)
library(bit)
library(vctrs)
library(tidyverse)
library(lubridate)
library(scales)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(readr)
library(googledrive)
library(purrr)
library(here)
Q.daily.2022 <- read.csv(here("Q", "2022", "Q.daily.2022.csv"))
Q.2022 <- read.csv(here("Q", "2022", "Predicted_Q_2022.csv"))
names(Q.2022)[names(Q.2022) == 'DateTimeAK'] <- 'datetimeAK'
names(Q.2022)[names(Q.2022) == 'Site'] <- 'site.ID'
Q.2022$datetimeAK <- ymd_hms(Q.2022$datetimeAK) # converting character to datetime
Q.2022$datetimeAK <- force_tz(Q.2022$datetimeAK, "America/Anchorage") # it already is in AK time so I want to make it recognize it without changing the actually time value
chem.2022 <- read.csv(here("processed_sensor_data", "2022", "SUNA.EXO.int.corr.lab_2022.csv"))
chem.2022 <- chem.2022[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem.2022$datetimeAK <- ymd_hms(chem.2022$datetimeAK) # converting character to datetime
chem.2022$datetimeAK <- force_tz(chem.2022$datetimeAK, "America/Anchorage") # converting character to datetime
names(chem.2022) <- c("datetimeAK", "site.ID", "fDOM", "SPC", "Turb", "NO3", "ABS_254")
### PLOTTING TO MAKE SURE OUR INPUT DATA LOOKS GOOD BEFORE DOING LITERALLY EVERYTHING ELSE ####
# pivot long to get all the response variables in one column
chem.2022_long <- chem.2022 %>%
filter(site.ID %in% c("FRCH", "MOOS", "POKE", "VAUL", "STRT")) %>%
pivot_longer(
cols = fDOM:ABS_254,
names_to = "response_var",
values_to = "concentration",
values_drop_na = TRUE
) # converting to a long format so each response_var is within a single column
FRCH.2022 <-  subset(chem.2022, site.ID == "FRCH")
FRCH.2022 <- FRCH.2022[-c(14573:14900), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
MOOS.2022 <-  subset(chem.2022, site.ID == "MOOS")
MOOS.2022 <- MOOS.2022[-c(14666:15037), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
POKE.2022 <-  subset(chem.2022, site.ID == "POKE")
POKE.2022 <- POKE.2022[-c(14481:14857), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
VAUL.2022 <-  subset(chem.2022, site.ID == "VAUL")
VAUL.2022 <- VAUL.2022[-c(14198:14548), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
STRT.2022 <-  subset(chem.2022, site.ID == "STRT")
STRT.2022 <- STRT.2022[-c(12278:12787), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
DOD.2022 <- rbind(FRCH.2022, MOOS.2022, POKE.2022,
VAUL.2022, STRT.2022)
DOD.2022 <- full_join(DOD.2022, Q.2022) # merging chem and discharge data
#
frch.final.discharge.2022 <- subset(Q.2022, site.ID == "FRCH")
strt.final.discharge.2022 <- subset(Q.2022, site.ID == "STRT")
poke.final.discharge.2022 <- subset(Q.2022, site.ID == "POKE")
vaul.final.discharge.2022 <- subset(Q.2022, site.ID == "VAUL")
moos.final.discharge.2022 <- subset(Q.2022, site.ID == "MOOS")
FRCH = full_join(frch.final.discharge.2022, FRCH.2022)
# MOOS #
MOOS = full_join(moos.final.discharge.2022, MOOS.2022)
# STRT #
STRT = full_join(strt.final.discharge.2022, STRT.2022)
# POKE #
POKE = full_join(poke.final.discharge.2022, POKE.2022)
# VAUL #
VAUL = full_join(vaul.final.discharge.2022, VAUL.2022)
CPCRW <- read_csv(here("Climate", "Precip", "CPCRW.RainGauge.2022.final.csv"))
CPCRW$datetimeAK <- force_tz(CPCRW$datetimeAK, "America/Anchorage") # it already is in AK time so I want to make it recognize it without changing the actually time value
frch.precip.discharge <- full_join(frch.final.discharge.2022, CPCRW) # merging precip data and discharge
moos.precip.discharge <- full_join(moos.final.discharge.2022, CPCRW) # merging precip data and discharge
poke.precip.discharge <- full_join(poke.final.discharge.2022, CPCRW) # merging precip data and discharge
vaul.precip.discharge <- full_join(vaul.final.discharge.2022, CPCRW) # merging precip data and discharge
strt.precip.discharge <- full_join(strt.final.discharge.2022, CPCRW) # merging precip data and discharge
#cari.precip.discharge <- full_join(cari.final.discharge.2022, CPCRW) # merging precip data and discharge
frch.precip.discharge <- frch.precip.discharge[order(frch.precip.discharge$datetimeAK),]
moos.precip.discharge <- moos.precip.discharge[order(moos.precip.discharge$datetimeAK),]
poke.precip.discharge <- poke.precip.discharge[order(poke.precip.discharge$datetimeAK),]
vaul.precip.discharge <- vaul.precip.discharge[order(vaul.precip.discharge$datetimeAK),]
strt.precip.discharge <- strt.precip.discharge[order(strt.precip.discharge$datetimeAK),]
#
ts <- seq(as.POSIXct("2022-04-01", tz = "America/Anchorage"),
as.POSIXct("2022-11-01", tz = "America/Anchorage"),
by = "30 min")
head(ts)
ts <- as.data.frame(ts)
names(ts) <- c("datetimeAK")
frch.precip.discharge <- left_join(ts, frch.precip.discharge, by = "datetimeAK")
### Sum daily discharge ###
frch.precip.discharge$twentyfour <- rollapplyr(frch.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
frch.precip.discharge$fourtyeight <- rollapplyr(frch.precip.discharge$mean, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
moos.precip.discharge$twentyfour <- rollapplyr(moos.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
moos.precip.discharge$fourtyeight <- rollapplyr(moos.precip.discharge$mean, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
strt.precip.discharge$twentyfour <- rollapplyr(strt.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
strt.precip.discharge$fourtyeight <- rollapplyr(strt.precip.discharge$mean, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
vaul.precip.discharge$twentyfour <- rollapplyr(vaul.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
vaul.precip.discharge$fourtyeight <- rollapplyr(vaul.precip.discharge$mean, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
poke.precip.discharge$twentyfour <- rollapplyr(poke.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
poke.precip.discharge$fourtyeight <- rollapplyr(poke.precip.discharge$mean, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
#
# Greater than 5 #
frch.five.twenty.four <- frch.precip.discharge[which(frch.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
frch.five.fourty.eight <- frch.precip.discharge[which(frch.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
moos.five.twenty.four <- moos.precip.discharge[which(moos.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
moos.five.fourty.eight <- moos.precip.discharge[which(moos.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
strt.five.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
strt.five.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
vaul.five.twenty.four <- vaul.precip.discharge[which(vaul.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
vaul.five.fourty.eight <- vaul.precip.discharge[which(vaul.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
poke.five.twenty.four <- poke.precip.discharge[which(poke.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
poke.five.fourty.eight <- poke.precip.discharge[which(poke.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
# Greater than 10 #
frch.ten.twenty.four <- frch.precip.discharge[which(frch.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
frch.ten.fourty.eight <- frch.precip.discharge[which(frch.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
moos.ten.twenty.four <- moos.precip.discharge[which(moos.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
moos.ten.fourty.eight <- moos.precip.discharge[which(moos.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
strt.ten.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
strt.ten.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
vaul.ten.twenty.four <- vaul.precip.discharge[which(vaul.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
vaul.ten.fourty.eight <- vaul.precip.discharge[which(vaul.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
poke.ten.twenty.four <- poke.precip.discharge[which(poke.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
poke.ten.fourty.eight <- poke.precip.discharge[which(poke.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
# storm 1 #
plot(MOOS$Q ~ MOOS$datetimeAK, type="p", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2022-07-01 00:00:00","2022-07-15 23:45:00"), tz="America/Anchorage"),
ylim = c(0, 2500))
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2022-07-01 00:00:00","2022-07-15 23:45:00"), tz="America/Anchorage"),
ylim = c(8,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(moos.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(moos.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
abline(v= as.POSIXct("2022-07-10 05:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2022-07-12 07:30:00", tz="America/Anchorage"), col="purple")
MOOS_storm1_07_10 = MOOS[MOOS$datetimeAK > as.POSIXct("2022-07-10 05:30:00", tz="America/Anchorage") &
MOOS$datetimeAK < as.POSIXct("2022-07-12 07:30:00", tz="America/Anchorage"),]
plot(MOOS_storm1_07_10$Q ~ as.POSIXct(MOOS_storm1_07_10$datetimeAK, tz="America/Anchorage"), xlab="", ylab="Q (L/sec)",ylim = c(0,2500), col="blue", main="MOOS 220710 storm 1",
xlim = as.POSIXct(c("2022-07-09 00:00:00","2022-07-13 23:45:00"), tz="America/Anchorage"))
plot(MOOS$Q ~ MOOS$datetimeAK, type="p", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2022-08-01 00:00:00","2022-08-15 23:45:00"), tz="America/Anchorage"),
ylim = c(0, 2500))
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2022-08-01 00:00:00","2022-08-15 23:45:00"), tz="America/Anchorage"),
ylim = c(8,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(moos.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(moos.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
abline(v= as.POSIXct("2022-08-05 22:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2022-08-06 16:30:00", tz="America/Anchorage"), col="purple")
MOOS_storm2a_08_05 = MOOS[MOOS$datetimeAK > as.POSIXct("2022-08-05 22:30:00", tz="America/Anchorage") &
MOOS$datetimeAK < as.POSIXct("2022-08-06 16:30:00", tz="America/Anchorage"),]
plot(MOOS_storm2a_08_05$Q ~ as.POSIXct(MOOS_storm2a_08_05$datetimeAK, tz="America/Anchorage"), xlab="", ylab="Q (L/sec)",ylim = c(0,1500), col="blue", main="MOOS 220805 storm 2a",
xlim = as.POSIXct(c("2022-08-05 00:00:00","2022-08-07 23:45:00"), tz="America/Anchorage"))
abline(v= as.POSIXct("2022-08-08 06:30:00", tz="America/Anchorage"), col="purple")
MOOS_storm2a_08_05 = MOOS[MOOS$datetimeAK > as.POSIXct("2022-08-05 22:30:00", tz="America/Anchorage") &
MOOS$datetimeAK < as.POSIXct("2022-08-08 06:30:00", tz="America/Anchorage"),]
plot(MOOS_storm2a_08_05$Q ~ as.POSIXct(MOOS_storm2a_08_05$datetimeAK, tz="America/Anchorage"), xlab="", ylab="Q (L/sec)",ylim = c(0,1500), col="blue", main="MOOS 220805 storm 2a",
xlim = as.POSIXct(c("2022-08-05 00:00:00","2022-08-07 23:45:00"), tz="America/Anchorage"))
plot(MOOS$Q ~ MOOS$datetimeAK, type="p", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2022-08-15 00:00:00","2022-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(0, 1000))
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2022-08-15 00:00:00","2022-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(8,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(moos.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(moos.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
abline(v= as.POSIXct("2022-08-19 05:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2022-08-20 06:30:00", tz="America/Anchorage"), col="purple")
MOOS_storm3_08_19 = MOOS[MOOS$datetimeAK > as.POSIXct("2022-08-19 05:30:00", tz="America/Anchorage") &
MOOS$datetimeAK < as.POSIXct("2022-08-20 06:30:00", tz="America/Anchorage"),]
plot(MOOS_storm3_08_19$Q ~ as.POSIXct(MOOS_storm3_08_19$datetimeAK, tz="America/Anchorage"), xlab="", ylab="Q (L/sec)",ylim = c(0,1000), col="blue", main="MOOS 220819 storm 3",
xlim = as.POSIXct(c("2022-08-18 00:00:00","2022-08-21 23:45:00"), tz="America/Anchorage"))
plot(MOOS$Q ~ MOOS$datetimeAK, type="p", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2022-09-10 00:00:00","2022-09-30 23:45:00"), tz="America/Anchorage"),
ylim = c(0, 1500))
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2022-09-10 00:00:00","2022-09-30 23:45:00"), tz="America/Anchorage"),
ylim = c(8,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(moos.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(moos.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
abline(v= as.POSIXct("2022-09-15 00:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2022-09-17 06:30:00", tz="America/Anchorage"), col="purple")
MOOS_storm4_09_15 = MOOS[MOOS$datetimeAK > as.POSIXct("2022-09-15 00:30:00", tz="America/Anchorage") &
MOOS$datetimeAK < as.POSIXct("2022-09-17 06:30:00", tz="America/Anchorage"),]
plot(MOOS_storm4_09_15$Q ~ as.POSIXct(MOOS_storm4_09_15$datetimeAK, tz="America/Anchorage"), xlab="", ylab="Q (L/sec)",ylim = c(0,1500), col="blue", main="MOOS 220915 storm 4",
xlim = as.POSIXct(c("2022-09-15 00:00:00","2022-09-17 23:45:00"), tz="America/Anchorage"))
MOOS_storm1_07_10_Q = subset(MOOS_storm1_07_10, select = c("datetimeAK","Q"))
names(MOOS_storm1_07_10_Q) = c("valuedatetime","datavalue")
MOOS_storm1_07_10_NO3 = subset(MOOS_storm1_07_10, select = c("datetimeAK","NO3"))
names(MOOS_storm1_07_10_NO3) = c("valuedatetime","datavalue")
MOOS_storm1_07_10_fDOM = subset(MOOS_storm1_07_10, select = c("datetimeAK","fDOM"))
names(MOOS_storm1_07_10_fDOM) = c("valuedatetime","datavalue")
MOOS_storm1_07_10_SPC = subset(MOOS_storm1_07_10, select = c("datetimeAK","SPC"))
names(MOOS_storm1_07_10_SPC) = c("valuedatetime","datavalue")
MOOS_storm1_07_10_turb = subset(MOOS_storm1_07_10, select = c("datetimeAK","Turb"))
names(MOOS_storm1_07_10_turb) = c("valuedatetime","datavalue")
MOOS_storm1_07_10_abs = subset(MOOS_storm1_07_10, select = c("datetimeAK","ABS_254"))
names(MOOS_storm1_07_10_abs) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_Q = subset(MOOS_storm2a_08_05, select = c("datetimeAK","Q"))
names(MOOS_storm2a_08_05_Q) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_NO3 = subset(MOOS_storm2a_08_05, select = c("datetimeAK","NO3"))
names(MOOS_storm2a_08_05_NO3) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_fDOM = subset(MOOS_storm2a_08_05, select = c("datetimeAK","fDOM"))
names(MOOS_storm2a_08_05_fDOM) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_SPC = subset(MOOS_storm2a_08_05, select = c("datetimeAK","SPC"))
names(MOOS_storm2a_08_05_SPC) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_turb = subset(MOOS_storm2a_08_05, select = c("datetimeAK","Turb"))
names(MOOS_storm2a_08_05_turb) = c("valuedatetime","datavalue")
MOOS_storm2a_08_05_abs = subset(MOOS_storm2a_08_05, select = c("datetimeAK","ABS_254"))
names(MOOS_storm2a_08_05_abs) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_Q = subset(MOOS_storm3_08_19, select = c("datetimeAK","Q"))
names(MOOS_storm3_08_19_Q) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_NO3 = subset(MOOS_storm3_08_19, select = c("datetimeAK","NO3"))
names(MOOS_storm3_08_19_NO3) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_fDOM = subset(MOOS_storm3_08_19, select = c("datetimeAK","fDOM"))
names(MOOS_storm3_08_19_fDOM) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_SPC = subset(MOOS_storm3_08_19, select = c("datetimeAK","SPC"))
names(MOOS_storm3_08_19_SPC) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_turb = subset(MOOS_storm3_08_19, select = c("datetimeAK","Turb"))
names(MOOS_storm3_08_19_turb) = c("valuedatetime","datavalue")
MOOS_storm3_08_19_abs = subset(MOOS_storm3_08_19, select = c("datetimeAK","ABS_254"))
names(MOOS_storm3_08_19_abs) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_Q = subset(MOOS_storm4_09_15, select = c("datetimeAK","Q"))
names(MOOS_storm4_09_15_Q) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_NO3 = subset(MOOS_storm4_09_15, select = c("datetimeAK","NO3"))
names(MOOS_storm4_09_15_NO3) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_fDOM = subset(MOOS_storm4_09_15, select = c("datetimeAK","fDOM"))
names(MOOS_storm4_09_15_fDOM) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_SPC = subset(MOOS_storm4_09_15, select = c("datetimeAK","SPC"))
names(MOOS_storm4_09_15_SPC) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_turb = subset(MOOS_storm4_09_15, select = c("datetimeAK","Turb"))
names(MOOS_storm4_09_15_turb) = c("valuedatetime","datavalue")
MOOS_storm4_09_15_abs = subset(MOOS_storm4_09_15, select = c("datetimeAK","ABS_254"))
names(MOOS_storm4_09_15_abs) = c("valuedatetime","datavalue")
write.csv(MOOS_storm1_07_10, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10.csv"))
write.csv(MOOS_storm1_07_10_Q, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_Q.csv"))
write.csv(MOOS_storm1_07_10_NO3, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_NO3.csv"))
write.csv(MOOS_storm1_07_10_fDOM, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_fDOM.csv"))
write.csv(MOOS_storm1_07_10_SPC, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_SPC.csv"))
write.csv(MOOS_storm1_07_10_turb, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_turb.csv"))
write.csv(MOOS_storm1_07_10_abs, here("Storm_Events", "2022", "MOOS", "MOOS_storm1_07_10_abs.csv"))
write.csv(MOOS_storm2a_08_05, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05.csv"))
write.csv(MOOS_storm2a_08_05_Q, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_Q.csv"))
write.csv(MOOS_storm2a_08_05_NO3, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_NO3.csv"))
write.csv(MOOS_storm2a_08_05_fDOM, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_fDOM.csv"))
write.csv(MOOS_storm2a_08_05_SPC, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_SPC.csv"))
write.csv(MOOS_storm2a_08_05_turb, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_turb.csv"))
write.csv(MOOS_storm2a_08_05_abs, here("Storm_Events", "2022", "MOOS", "MOOS_storm2a_08_05_abs.csv"))
write.csv(MOOS_storm3_08_19, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19.csv"))
write.csv(MOOS_storm3_08_19_Q, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_Q.csv"))
write.csv(MOOS_storm3_08_19_NO3, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_NO3.csv"))
write.csv(MOOS_storm3_08_19_fDOM, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_fDOM.csv"))
write.csv(MOOS_storm3_08_19_SPC, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_SPC.csv"))
write.csv(MOOS_storm3_08_19_turb, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_turb.csv"))
write.csv(MOOS_storm3_08_19_abs, here("Storm_Events", "2022", "MOOS", "MOOS_storm3_08_19_abs.csv"))
write.csv(MOOS_storm4_09_15, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15.csv"))
write.csv(MOOS_storm4_09_15_Q, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_Q.csv"))
write.csv(MOOS_storm4_09_15_NO3, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_NO3.csv"))
write.csv(MOOS_storm4_09_15_fDOM, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_fDOM.csv"))
write.csv(MOOS_storm4_09_15_SPC, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_SPC.csv"))
write.csv(MOOS_storm4_09_15_turb, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_turb.csv"))
write.csv(MOOS_storm4_09_15_abs, here("Storm_Events", "2022", "MOOS", "MOOS_storm4_09_15_abs.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(boot)
library(lubridate)
library(here)
Sys.which("python")
use_python("/usr/local/bin/python3")
options(tz="America/Anchorage")
# install pandas #
virtualenv_create("r-reticulate")
# RETICULATE_PYTHON = "lib/python3.8"
reticulate::py_config()
reticulate::py_install("pandas")
reticulate::repl_python()
