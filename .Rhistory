STRT_SPC_storm$site.ID <- "STRT"
STRT_SPC_storm[cols] <- log(STRT_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_SPC_storm <- STRT_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_SPC_storm_ascending <- filter(STRT_SPC_storm, limb == "ascending")
STRT_SPC_storm_ascending <- STRT_SPC_storm_ascending[is.finite(STRT_SPC_storm_ascending$Q.norm) & is.finite(STRT_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.strt <- STRT_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_SPC_storm$storm.ID = c(rep("storm10", 195),
rep("storm11", 399),
rep("storm12", 171),
rep("storm13", 222),
rep("storm14", 211),
rep("storm1a", 111),
rep("storm1b", 234),
rep("storm1c", 406),
rep("storm3", 342),
rep("storm4", 318),
rep("storm6a", 107),
rep("storm6b", 511),
rep("storm8", 91))
names(VAUL_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
VAUL_SPC_storm$site.ID <- "VAUL"
VAUL_SPC_storm[cols] <- log(VAUL_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_SPC_storm <- VAUL_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_SPC_storm_ascending <- filter(VAUL_SPC_storm, limb == "ascending")
VAUL_SPC_storm_ascending <- VAUL_SPC_storm_ascending[is.finite(VAUL_SPC_storm_ascending$Q.norm) & is.finite(VAUL_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.vaul <- VAUL_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_SPC_storm$storm.ID = c(rep("storm1", 203),
rep("storm2a", 103),
rep("storm2b", 251),
rep("storm3", 291),
rep("storm4", 156),
rep("storm5", 220),
rep("storm6", 184),
rep("storm7", 308),
rep("storm8a", 111),
rep("storm8b", 481),
rep("storm9", 99))
names(CARI_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
CARI_SPC_storm$site.ID <- "CARI"
CARI_SPC_storm[cols] <- log(CARI_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_SPC_storm <- CARI_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_SPC_storm_ascending <- filter(CARI_SPC_storm, limb == "ascending")
CARI_SPC_storm_ascending <- CARI_SPC_storm_ascending[is.finite(CARI_SPC_storm_ascending$Q.norm) & is.finite(CARI_SPC_storm_ascending$SPC.norm), ]
beta.all.spc.cari <- CARI_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_SPC_storm_ascending$DateTime <- as.POSIXct(FRCH_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_SPC_storm_ascending$DateTime <- as.POSIXct(MOOS_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_SPC_storm_ascending$DateTime <- as.POSIXct(STRT_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_SPC_storm_ascending$DateTime <- as.POSIXct(VAUL_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
CARI_SPC_storm_ascending$DateTime <- as.POSIXct(CARI_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_SPC_storm_ascending$DateTime <- as.POSIXct(POKE_SPC_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_SPC_storm <- rbind(FRCH_SPC_storm_ascending, MOOS_SPC_storm_ascending,
POKE_SPC_storm_ascending, VAUL_SPC_storm_ascending,
STRT_SPC_storm_ascending, CARI_SPC_storm_ascending)
beta.all.SPC <- All_SPC_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
beta.all.SPC$response_var <- "SPC"
all.2020.ci.SPC <- All_SPC_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(SPC.norm ~ Q.norm, data = .x)))
all.2020.ci.SPC$response_var <- "SPC"
##### Turb #####
FRCH_turb_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_turb_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_turb_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_turb_storm_list_beta, inner_join, by = "valuedatetime")
POKE_turb_storm <- map2_df(POKE_Q_storm_list_beta, POKE_turb_storm_list_beta, inner_join, by = "valuedatetime")
STRT_turb_storm <- map2_df(STRT_Q_storm_list_beta, STRT_turb_storm_list_beta, inner_join, by = "valuedatetime")
VAUL_turb_storm <- map2_df(VAUL_Q_storm_list_beta, VAUL_turb_storm_list_beta, inner_join, by = "valuedatetime")
CARI_turb_storm <- map2_df(CARI_Q_storm_list_beta, CARI_turb_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_turb_storm$storm.ID = c(rep("storm1", 487),
rep("storm10a", 255),
rep("storm10b", 151),
rep("storm11", 91),
rep("storm2", 123),
rep("storm3a", 1463),
rep("storm4a", 187),
rep("storm4b", 203),
rep("storm5", 59),
rep("storm6", 103),
rep("storm7", 339),
rep("storm8", 383),
rep("storm9a", 139),
rep("storm9b", 286))
names(FRCH_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
FRCH_turb_storm$site.ID <- "FRCH"
cols <- c("turb.norm","Q.norm")
FRCH_turb_storm[cols] <- log(FRCH_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_turb_storm <- FRCH_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_turb_storm_ascending <- filter(FRCH_turb_storm, limb == "ascending")
FRCH_turb_storm_ascending <- FRCH_turb_storm_ascending[is.finite(FRCH_turb_storm_ascending$Q.norm) & is.finite(FRCH_turb_storm_ascending$turb.norm), ]
beta.all.turb <- FRCH_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_turb_storm$storm.ID = c(rep("storm1", 723),
rep("storm2", 327),
rep("storm3", 129),
rep("storm4", 321),
rep("storm5", 252),
rep("storm6a", 108),
rep("storm6b", 288),
rep("storm7a", 276),
rep("storm7b", 186),
rep("storm8", 195),
rep("storm9", 405))
names(MOOS_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
MOOS_turb_storm$site.ID <- "MOOS"
MOOS_turb_storm[cols] <- log(MOOS_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_turb_storm <- MOOS_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_turb_storm_ascending <- filter(MOOS_turb_storm, limb == "ascending")
MOOS_turb_storm_ascending <- MOOS_turb_storm_ascending[is.finite(MOOS_turb_storm_ascending$Q.norm) & is.finite(MOOS_turb_storm_ascending$turb.norm), ]
beta.all.turb.moos.with.all <- MOOS_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# POKE #
POKE_turb_storm$storm.ID = c(
rep("storm11", 199),
rep("storm12", 307),
rep("storm13", 87),
rep("storm14", 383),
rep("storm15", 335),
rep("storm19", 135),
rep("storm20", 139),
rep("storm21", 227),
rep("storm22a", 107),
rep("storm22b", 212),
rep("storm3", 119),
rep("storm4a", 98),
rep("storm4b", 95),
rep("storm4c", 159),
rep("storm5", 219),
rep("storm7", 127),
rep("storm8", 135),
rep("storm9", 263))
names(POKE_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
POKE_turb_storm$site.ID <- "POKE"
POKE_turb_storm[cols] <- log(POKE_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_turb_storm <- POKE_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_turb_storm_ascending <- filter(POKE_turb_storm, limb == "ascending")
POKE_turb_storm_ascending <- POKE_turb_storm_ascending[is.finite(POKE_turb_storm_ascending$Q.norm) & is.finite(POKE_turb_storm_ascending$turb.norm), ]
beta.all.turb.moos.with.all <- POKE_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_turb_storm$storm.ID = c(rep("storm10", 246),
rep("storm1a", 969),
rep("storm2", 166),
rep("storm3", 386),
rep("storm4a", 140),
rep("storm4b", 322),
rep("storm5", 250),
rep("storm6", 122),
rep("storm7a", 98),
rep("storm8", 162),
rep("storm9a", 294),
rep("storm9b", 134),
rep("storm9c", 482))
names(STRT_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
STRT_turb_storm$site.ID <- "STRT"
STRT_turb_storm[cols] <- log(STRT_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_turb_storm <- STRT_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_turb_storm_ascending <- filter(STRT_turb_storm, limb == "ascending")
STRT_turb_storm_ascending <- STRT_turb_storm_ascending[is.finite(STRT_turb_storm_ascending$Q.norm) & is.finite(STRT_turb_storm_ascending$turb.norm), ]
beta.all.turb.strt <- STRT_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_turb_storm$storm.ID = c(rep("storm10", 195),
rep("storm11", 399),
rep("storm12", 171),
rep("storm13", 222),
rep("storm14", 211),
rep("storm1a", 111),
rep("storm1b", 234),
rep("storm1c", 406),
rep("storm3", 342),
rep("storm4", 318),
rep("storm6a", 107),
rep("storm6b", 511),
rep("storm8", 91))
names(VAUL_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
VAUL_turb_storm$site.ID <- "VAUL"
VAUL_turb_storm[cols] <- log(VAUL_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_turb_storm <- VAUL_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_turb_storm_ascending <- filter(VAUL_turb_storm, limb == "ascending")
VAUL_turb_storm_ascending <- VAUL_turb_storm_ascending[is.finite(VAUL_turb_storm_ascending$Q.norm) & is.finite(VAUL_turb_storm_ascending$turb.norm), ]
beta.all.turb.vaul <- VAUL_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_turb_storm$storm.ID = c(rep("storm1", 203),
rep("storm2a", 103),
rep("storm2b", 251),
rep("storm3", 291),
rep("storm4", 156),
rep("storm5", 220),
rep("storm6", 184),
rep("storm7", 308),
rep("storm8a", 111),
rep("storm8b", 481),
rep("storm9", 99))
names(CARI_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
CARI_turb_storm$site.ID <- "CARI"
CARI_turb_storm[cols] <- log(CARI_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_turb_storm <- CARI_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_turb_storm_ascending <- filter(CARI_turb_storm, limb == "ascending")
CARI_turb_storm_ascending <- CARI_turb_storm_ascending[is.finite(CARI_turb_storm_ascending$Q.norm) & is.finite(CARI_turb_storm_ascending$turb.norm), ]
beta.all.turb.cari <- CARI_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_turb_storm_ascending$DateTime <- as.POSIXct(FRCH_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_turb_storm_ascending$DateTime <- as.POSIXct(MOOS_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_turb_storm_ascending$DateTime <- as.POSIXct(STRT_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_turb_storm_ascending$DateTime <- as.POSIXct(VAUL_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
CARI_turb_storm_ascending$DateTime <- as.POSIXct(CARI_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_turb_storm_ascending$DateTime <- as.POSIXct(POKE_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_turb_storm<- rbind(FRCH_turb_storm_ascending, MOOS_turb_storm_ascending,
POKE_turb_storm_ascending, VAUL_turb_storm_ascending,
STRT_turb_storm_ascending, CARI_turb_storm_ascending )
beta.all.turb <- All_turb_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
beta.all.turb$response_var <- "turb"
all.2020.ci.turb <- All_turb_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(turb.norm ~ Q.norm, data = .x)))
all.2020.ci.turb$response_var <- "turb"
##### ABS #####
FRCH_abs_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_abs_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_abs_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_abs_storm_list_beta, inner_join, by = "valuedatetime")
POKE_abs_storm <- map2_df(POKE_Q_storm_list_beta, POKE_abs_storm_list_beta, inner_join, by = "valuedatetime")
STRT_abs_storm <- map2_df(STRT_Q_storm_list_beta, STRT_abs_storm_list_beta, inner_join, by = "valuedatetime")
VAUL_abs_storm <- map2_df(VAUL_Q_storm_list_beta, VAUL_abs_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_abs_storm$storm.ID = c(rep("storm1", 487),
rep("storm10a", 255),
rep("storm10b", 151),
rep("storm11", 91),
rep("storm2", 123),
rep("storm3a", 1463),
rep("storm4a", 187),
rep("storm4b", 203),
rep("storm5", 59),
rep("storm6", 103),
rep("storm7", 339),
rep("storm8", 383),
rep("storm9a", 139),
rep("storm9b", 286))
names(FRCH_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
FRCH_abs_storm$site.ID <- "FRCH"
cols <- c("abs.norm","Q.norm")
FRCH_abs_storm[cols] <- log(FRCH_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_abs_storm <- FRCH_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_abs_storm_ascending <- filter(FRCH_abs_storm, limb == "ascending")
FRCH_abs_storm_ascending <- FRCH_abs_storm_ascending[is.finite(FRCH_abs_storm_ascending$Q.norm) & is.finite(FRCH_abs_storm_ascending$abs.norm), ]
beta.all.abs <- FRCH_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_abs_storm$storm.ID = c(rep("storm1", 723),
rep("storm2", 327),
rep("storm3", 129),
rep("storm4", 321),
rep("storm5", 252),
rep("storm6a", 108),
rep("storm6b", 288),
rep("storm7a", 276),
rep("storm7b", 186),
rep("storm8", 195),
rep("storm9", 405))
names(MOOS_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
MOOS_abs_storm$site.ID <- "MOOS"
MOOS_abs_storm[cols] <- log(MOOS_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_abs_storm <- MOOS_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_abs_storm_ascending <- filter(MOOS_abs_storm, limb == "ascending")
MOOS_abs_storm_ascending <- MOOS_abs_storm_ascending[is.finite(MOOS_abs_storm_ascending$Q.norm) & is.finite(MOOS_abs_storm_ascending$abs.norm), ]
beta.all.abs.moos.with.all <- MOOS_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# POKE #
POKE_abs_storm$storm.ID = c(
rep("storm11", 199),
rep("storm12", 307),
rep("storm13", 87),
rep("storm14", 383),
rep("storm15", 335),
rep("storm19", 135),
rep("storm20", 139),
rep("storm21", 227),
rep("storm22a", 107),
rep("storm22b", 212),
rep("storm3", 119),
rep("storm4a", 98),
rep("storm4b", 95),
rep("storm4c", 159),
rep("storm5", 219),
rep("storm7", 127),
rep("storm8", 135),
rep("storm9", 263))
names(POKE_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
POKE_abs_storm$site.ID <- "POKE"
POKE_abs_storm[cols] <- log(POKE_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_abs_storm <- POKE_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_abs_storm_ascending <- filter(POKE_abs_storm, limb == "ascending")
POKE_abs_storm_ascending <- POKE_abs_storm_ascending[is.finite(POKE_abs_storm_ascending$Q.norm) & is.finite(POKE_abs_storm_ascending$abs.norm), ]
beta.all.abs.moos.with.all <- POKE_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_abs_storm$storm.ID = c(rep("storm10", 246),
rep("storm1a", 969),
rep("storm2", 166),
rep("storm3", 386),
rep("storm4a", 140),
rep("storm4b", 322),
rep("storm5", 250),
rep("storm6", 122),
rep("storm7a", 98),
rep("storm8", 162),
rep("storm9a", 294),
rep("storm9b", 134),
rep("storm9c", 482))
names(STRT_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
STRT_abs_storm$site.ID <- "STRT"
STRT_abs_storm[cols] <- log(STRT_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_abs_storm <- STRT_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_abs_storm_ascending <- filter(STRT_abs_storm, limb == "ascending")
STRT_abs_storm_ascending <- STRT_abs_storm_ascending[is.finite(STRT_abs_storm_ascending$Q.norm) & is.finite(STRT_abs_storm_ascending$abs.norm), ]
beta.all.abs.strt <- STRT_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_abs_storm$storm.ID = c(rep("storm10", 195),
rep("storm11", 399),
rep("storm12", 171),
rep("storm13", 222),
rep("storm14", 211),
rep("storm1a", 111),
rep("storm1b", 234),
rep("storm1c", 406),
rep("storm3", 342),
rep("storm4", 318),
rep("storm6a", 107),
rep("storm6b", 511),
rep("storm8", 91))
names(VAUL_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
VAUL_abs_storm$site.ID <- "VAUL"
VAUL_abs_storm[cols] <- log(VAUL_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_abs_storm <- VAUL_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_abs_storm_ascending <- filter(VAUL_abs_storm, limb == "ascending")
VAUL_abs_storm_ascending <- VAUL_abs_storm_ascending[is.finite(VAUL_abs_storm_ascending$Q.norm) & is.finite(VAUL_abs_storm_ascending$abs.norm), ]
beta.all.abs.vaul <- VAUL_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
# ALL #
FRCH_abs_storm_ascending$DateTime <- as.POSIXct(FRCH_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
MOOS_abs_storm_ascending$DateTime <- as.POSIXct(MOOS_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT_abs_storm_ascending$DateTime <- as.POSIXct(STRT_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_abs_storm_ascending$DateTime <- as.POSIXct(VAUL_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
POKE_abs_storm_ascending$DateTime <- as.POSIXct(POKE_abs_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_abs_storm<- rbind(FRCH_abs_storm_ascending, MOOS_abs_storm_ascending,
POKE_abs_storm_ascending, VAUL_abs_storm_ascending,
STRT_abs_storm_ascending)
beta.all.abs <- All_abs_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
beta.all.abs$response_var <- "abs"
all.2020.ci.abs <- All_abs_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(abs.norm ~ Q.norm, data = .x)))
all.2020.ci.abs$response_var <- "abs"
beta.all.2020 <- rbind(all.2020.ci.no3, all.2020.ci.fDOM,
all.2020.ci.SPC, all.2020.ci.turb,
all.2020.ci.abs)
write.csv(beta.all.2020, here("Output_from_analysis", "06_BETA", "beta.2020.csv"))
beta.all.2020 <- beta.all.2020 %>%
filter(Parameter != "(Intercept)")
View(beta.all.2020)
