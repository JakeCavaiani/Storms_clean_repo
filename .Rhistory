"VAUL" = "VAUL\n(58%)")) +
coord_cartesian(xlim = c(1, 6.05)) +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5"), guide = "none") +
xlab("") +
ylab("Mean HI") +
theme_tq() +
geom_text(data = annotations, aes(label = Label, y = y_position),
position = position_dodge(width = 0.75), size = 8) +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=18),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "bottom",
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text = element_text(size = 20))
my_labeller <- as_labeller(c(NO3 = "NO[3]^~", fDOM="fDOM", SPC="SPC", turb = "Turbidity"),
default = label_parsed)
# all years  #
# POKE - 25%
# CARI - 29%
# STRT - 30%
# FRCH - 33%
# MOOS - 38%
# VAUL - 58%
desired_order <- c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL")
annotations <- data.frame(
response_var = c("fDOM", "fDOM","fDOM", "fDOM", "fDOM", "fDOM",
"NO3", "NO3","NO3", "NO3", "NO3", "NO3",
"SPC", "SPC","SPC", "SPC", "SPC", "SPC",
"turb", "turb","turb", "turb", "turb", "turb"),
site.ID = c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL"),
Label = c("c", "c", "bc", "bc", "ab", "a",  # fDOM
"", "", "", "", "", "",  # NO3
"", "", "", "", "", "",  # SPC
"", "", "", "", "", ""  # Turb
),
y_position = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
Burn = c("burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned"))
ggplot(AMC_new, aes(x = site.ID, y = meanHI, pattern = Burn, fill = site.ID)) +
ggdist::stat_halfeye(adjust = 0.5,
justification = -.3,
.width = -0,
point_colour = NA,
scale = 0.5) +
geom_boxplot(width = .25,
outlier.colour = NA,
alpha = 0.5) +
geom_boxplot_pattern(position = position_dodge(preserve = "single"),
width = .25,
color = "black",
pattern_fill = "white",
pattern_angle = 45,
pattern_density = 0.1,
pattern_spacing = 0.025,
pattern_key_scale_factor = 0.6) +
geom_hline(yintercept= 0, linetype="dashed", color = "red") +
scale_pattern_manual(values = c(burned = "stripe", unburned = "none")) +
scale_x_discrete(limits = desired_order,
labels = c("POKE" = "POKE\n(25%)",
"CARI" = "CARI\n(29%)",
"STRT" = "STRT\n(30%)",
"FRCH" = "FRCH\n(33%)",
"MOOS" = "MOOS\n(38%)",
"VAUL" = "VAUL\n(58%)")) +
coord_cartesian(xlim = c(1, 6.05)) +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5"), guide = "none") +
xlab("") +
ylab("Mean HI") +
theme_tq() +
geom_text(data = annotations, aes(label = Label, y = y_position),
position = position_dodge(width = 0.75), size = 8) +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=18),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "bottom",
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text = element_text(size = 20))
my_labeller <- as_labeller(c(NO3 = expression(paste(N*O[3]^"-")), fDOM="fDOM", SPC="SPC", turb = "Turbidity"),
default = label_parsed)
# all years  #
# POKE - 25%
# CARI - 29%
# STRT - 30%
# FRCH - 33%
# MOOS - 38%
# VAUL - 58%
desired_order <- c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL")
annotations <- data.frame(
response_var = c("fDOM", "fDOM","fDOM", "fDOM", "fDOM", "fDOM",
"NO3", "NO3","NO3", "NO3", "NO3", "NO3",
"SPC", "SPC","SPC", "SPC", "SPC", "SPC",
"turb", "turb","turb", "turb", "turb", "turb"),
site.ID = c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL"),
Label = c("c", "c", "bc", "bc", "ab", "a",  # fDOM
"", "", "", "", "", "",  # NO3
"", "", "", "", "", "",  # SPC
"", "", "", "", "", ""  # Turb
),
y_position = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
Burn = c("burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned"))
ggplot(AMC_new, aes(x = site.ID, y = meanHI, pattern = Burn, fill = site.ID)) +
ggdist::stat_halfeye(adjust = 0.5,
justification = -.3,
.width = -0,
point_colour = NA,
scale = 0.5) +
geom_boxplot(width = .25,
outlier.colour = NA,
alpha = 0.5) +
geom_boxplot_pattern(position = position_dodge(preserve = "single"),
width = .25,
color = "black",
pattern_fill = "white",
pattern_angle = 45,
pattern_density = 0.1,
pattern_spacing = 0.025,
pattern_key_scale_factor = 0.6) +
geom_hline(yintercept= 0, linetype="dashed", color = "red") +
scale_pattern_manual(values = c(burned = "stripe", unburned = "none")) +
scale_x_discrete(limits = desired_order,
labels = c("POKE" = "POKE\n(25%)",
"CARI" = "CARI\n(29%)",
"STRT" = "STRT\n(30%)",
"FRCH" = "FRCH\n(33%)",
"MOOS" = "MOOS\n(38%)",
"VAUL" = "VAUL\n(58%)")) +
coord_cartesian(xlim = c(1, 6.05)) +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5"), guide = "none") +
xlab("") +
ylab("Mean HI") +
theme_tq() +
geom_text(data = annotations, aes(label = Label, y = y_position),
position = position_dodge(width = 0.75), size = 8) +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=18),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "bottom",
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text = element_text(size = 20))
my_labeller <- as_labeller(c(NO3 = expression(paste("NO"[3]^"-")), fDOM="fDOM", SPC="SPC", turb = "Turbidity"),
default = label_parsed)
# all years  #
# POKE - 25%
# CARI - 29%
# STRT - 30%
# FRCH - 33%
# MOOS - 38%
# VAUL - 58%
desired_order <- c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL")
annotations <- data.frame(
response_var = c("fDOM", "fDOM","fDOM", "fDOM", "fDOM", "fDOM",
"NO3", "NO3","NO3", "NO3", "NO3", "NO3",
"SPC", "SPC","SPC", "SPC", "SPC", "SPC",
"turb", "turb","turb", "turb", "turb", "turb"),
site.ID = c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL"),
Label = c("c", "c", "bc", "bc", "ab", "a",  # fDOM
"", "", "", "", "", "",  # NO3
"", "", "", "", "", "",  # SPC
"", "", "", "", "", ""  # Turb
),
y_position = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
Burn = c("burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned"))
ggplot(AMC_new, aes(x = site.ID, y = meanHI, pattern = Burn, fill = site.ID)) +
ggdist::stat_halfeye(adjust = 0.5,
justification = -.3,
.width = -0,
point_colour = NA,
scale = 0.5) +
geom_boxplot(width = .25,
outlier.colour = NA,
alpha = 0.5) +
geom_boxplot_pattern(position = position_dodge(preserve = "single"),
width = .25,
color = "black",
pattern_fill = "white",
pattern_angle = 45,
pattern_density = 0.1,
pattern_spacing = 0.025,
pattern_key_scale_factor = 0.6) +
geom_hline(yintercept= 0, linetype="dashed", color = "red") +
scale_pattern_manual(values = c(burned = "stripe", unburned = "none")) +
scale_x_discrete(limits = desired_order,
labels = c("POKE" = "POKE\n(25%)",
"CARI" = "CARI\n(29%)",
"STRT" = "STRT\n(30%)",
"FRCH" = "FRCH\n(33%)",
"MOOS" = "MOOS\n(38%)",
"VAUL" = "VAUL\n(58%)")) +
coord_cartesian(xlim = c(1, 6.05)) +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5"), guide = "none") +
xlab("") +
ylab("Mean HI") +
theme_tq() +
geom_text(data = annotations, aes(label = Label, y = y_position),
position = position_dodge(width = 0.75), size = 8) +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=18),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "bottom",
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text = element_text(size = 20))
my_labeller <- as_labeller(c(NO3 = "NO[3]", fDOM="fDOM", SPC="SPC", turb = "Turbidity"),
default = label_parsed)
# all years  #
# POKE - 25%
# CARI - 29%
# STRT - 30%
# FRCH - 33%
# MOOS - 38%
# VAUL - 58%
desired_order <- c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL")
annotations <- data.frame(
response_var = c("fDOM", "fDOM","fDOM", "fDOM", "fDOM", "fDOM",
"NO3", "NO3","NO3", "NO3", "NO3", "NO3",
"SPC", "SPC","SPC", "SPC", "SPC", "SPC",
"turb", "turb","turb", "turb", "turb", "turb"),
site.ID = c("POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL",
"POKE", "CARI", "STRT", "FRCH", "MOOS", "VAUL"),
Label = c("c", "c", "bc", "bc", "ab", "a",  # fDOM
"", "", "", "", "", "",  # NO3
"", "", "", "", "", "",  # SPC
"", "", "", "", "", ""  # Turb
),
y_position = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
Burn = c("burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned",
"burned", "unburned", "burned", "unburned", "burned", "unburned"))
ggplot(AMC_new, aes(x = site.ID, y = meanHI, pattern = Burn, fill = site.ID)) +
ggdist::stat_halfeye(adjust = 0.5,
justification = -.3,
.width = -0,
point_colour = NA,
scale = 0.5) +
geom_boxplot(width = .25,
outlier.colour = NA,
alpha = 0.5) +
geom_boxplot_pattern(position = position_dodge(preserve = "single"),
width = .25,
color = "black",
pattern_fill = "white",
pattern_angle = 45,
pattern_density = 0.1,
pattern_spacing = 0.025,
pattern_key_scale_factor = 0.6) +
geom_hline(yintercept= 0, linetype="dashed", color = "red") +
scale_pattern_manual(values = c(burned = "stripe", unburned = "none")) +
scale_x_discrete(limits = desired_order,
labels = c("POKE" = "POKE\n(25%)",
"CARI" = "CARI\n(29%)",
"STRT" = "STRT\n(30%)",
"FRCH" = "FRCH\n(33%)",
"MOOS" = "MOOS\n(38%)",
"VAUL" = "VAUL\n(58%)")) +
coord_cartesian(xlim = c(1, 6.05)) +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5"), guide = "none") +
xlab("") +
ylab("Mean HI") +
theme_tq() +
geom_text(data = annotations, aes(label = Label, y = y_position),
position = position_dodge(width = 0.75), size = 8) +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=18),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "bottom",
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text = element_text(size = 20))
ggsave("mean_HI_facet_constituent.pdf",
path = here("plots", "Publication"),
width = 10, height = 10)
?as_labeller
library(xfun)
library(bit)
library(vctrs)
library(tidyverse)
library(lubridate)
library(scales)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(readr)
library(googledrive)
library(purrr)
library(here)
Q.daily.2015 <- read.csv(here("processed_sensor_data", "2015", "Q.daily.2015.csv"))
Q.2015 <- read.csv(here("processed_sensor_data", "2015", "Predicted_Q_2015.csv"))
Q.2015 <- Q.2015[c("Site", "DateTimeAK", "Q")]
names(Q.2015) <- c("site.ID", "datetimeAK", "Q") # renaming the column headers to match that of the chem file
Q.2015$datetimeAK <- ymd_hms(Q.2015$datetimeAK) # converting character to datetime
Q.2015$datetimeAK <- force_tz(Q.2015$datetimeAK, "America/Anchorage") # converting character to datetime
## Chems data input
chem.2015 <- read.csv(here("processed_sensor_data", "2015", "SUNA.EXO.int.corr.lab_2015.csv"), na.strings = "NA")
chem.2015 <- chem.2015[c("datetimeAK", "Site", "fDOM.QSU.T.turb.col", "SpCond.uScm.adj",
"Turbidity.FNU.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem.2015$datetimeAK <- ymd_hms(chem.2015$datetimeAK) # converting character to datetime
chem.2015$datetimeAK <- force_tz(chem.2015$datetimeAK, "America/Anchorage") # converting character to datetime
names(chem.2015) <- c("datetimeAK", "site.ID", "fDOM", "SPC", "Turb", "NO3", "ABS_254")
### PLOTTING TO MAKE SURE OUR INPUT DATA LOOKS GOOD BEFORE DOING LITERALLY EVERYTHING ELSE ####
# I am looking for a complete time series, looking at gaps in the data and seeing if there are any
# really variable chemistry points.
# pivot long to get all the response variables in one column
chem_2015_long <- chem.2015 %>%
filter(site.ID %in% c("FRCH", "MOOS")) %>%
pivot_longer(
cols = fDOM:ABS_254,
names_to = "response_var",
values_to = "concentration",
values_drop_na = TRUE
) # converting to a long format so each response_var is within a single column
ggplot(chem_2015_long, aes(x = datetimeAK, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D")) +
facet_wrap(~response_var, scales = "free") +
theme_classic()
# subset data by site #
FRCH.2015 <-  subset(chem.2015, site.ID == "FRCH")
FRCH.2015 <- FRCH.2015[-c(12519:12849), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
MOOS.2015 <-  subset(chem.2015, site.ID == "MOOS")
MOOS.2015 <- MOOS.2015[-c(12540:12796), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
## TKH: need clean-up line 90 & 93. Figure out what the additional rows are and explain them in the notes when removing (maybe "remove rows containing all NA")
DOD.2015 <- rbind(FRCH.2015, MOOS.2015)
DOD.2015 <- full_join(DOD.2015, Q.2015, by = c("site.ID", "datetimeAK")) # merging chem and discharge data
## TKH: Need some annotation here. Q was joined to chems in the previous line. What are these additional steps?
frch.final.discharge.2015 <- subset(Q.2015, site.ID == "FRCH")
moos.final.discharge.2015 <- subset(Q.2015, site.ID == "MOOS")
Q.2015$day = format(as.POSIXct(Q.2015$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q.2015$day = as.POSIXct(Q.2015$day, "%Y-%m-%d", tz="America/Anchorage")
Q.daily.2015 = with(Q.2015, tapply(Q, list(day, site.ID), mean))
Q.daily.2015 = as.data.frame(Q.daily.2015)
FRCH.Q.2015 = as.data.frame(Q.daily.2015$FRCH)
FRCH.Q.2015$day = as.Date(rownames(Q.daily.2015))
names(FRCH.Q.2015) = c("Discharge_Lsec", "day")
MOOS.Q.2015 = as.data.frame(Q.daily.2015$MOOS)
MOOS.Q.2015$day = as.Date(rownames(Q.daily.2015))
names(MOOS.Q.2015) = c("Discharge_Lsec", "day")
# join Q and chem data
# FRCH #
FRCH = full_join(FRCH.2015, frch.final.discharge.2015)
# MOOS #
MOOS = full_join(MOOS.2015, moos.final.discharge.2015)
# Baseflow Separation #
any(is.na(FRCH.Q.2015$day))
any(is.na(FRCH.Q.2015$Discharge_Lsec))
FRCH.Q.2015 <- na.omit(FRCH.Q.2015)
any(is.na(MOOS.Q.2015$day))
any(is.na(MOOS.Q.2015$Discharge_Lsec))
MOOS.Q.2015 <- na.omit(MOOS.Q.2015) # Removed 3 rows - (126 to 123)
# plot discharge to check for complete time series and gaps
plot(frch.final.discharge.2015$Q ~ frch.final.discharge.2015$datetimeAK, type = "l", xlab = "", ylab = "Q (L/sec)",
xlim =  as.POSIXct(c("2015-05-01 00:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 5000), col="blue")
#
plot(moos.final.discharge.2015$Q ~ moos.final.discharge.2015$datetimeAK, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2015-05-01 00:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(0,5000), col="blue")
### Merge Discharge and Precip ###
CPCRW <- read_csv(here("Climate", "Precip", "CPCRW.RainGauge.2015.final.csv"))
CPCRW$datetimeAK <- force_tz(CPCRW$datetimeAK, "America/Anchorage") # it already is in AK time so I want to make it recognize it without changing the actually time value
frch.precip.discharge <- full_join(frch.final.discharge.2015, CPCRW) # merging precip data and discharge
moos.precip.discharge <- full_join(moos.final.discharge.2015, CPCRW) # merging precip data and discharge
frch.precip.discharge <- frch.precip.discharge[order(frch.precip.discharge$datetimeAK),]
moos.precip.discharge <- moos.precip.discharge[order(moos.precip.discharge$datetimeAK),]
# making a uniform time series with 30 minute intervals and then I can sum precip by 24/48hour windows
# This step is to make a normalized data frame that has 30 minute intervals without any gaps
# so when I sum up by 24 and 48 hours I am getting the correct values for the sums
ts <- seq(as.POSIXct("2015-05-01", tz = "America/Anchorage"),
as.POSIXct("2015-11-01", tz = "America/Anchorage"),
by = "60 min")
head(ts)
ts <- as.data.frame(ts)
names(ts) <- c("datetimeAK")
frch.precip.discharge <- left_join(ts, frch.precip.discharge, by = "datetimeAK")
### Sum daily discharge ###
frch.precip.discharge$twentyfour <- rollapplyr(frch.precip.discharge$mean, 24, sum, na.rm = TRUE, fill = NA, partial = TRUE)
frch.precip.discharge$fourtyeight <- rollapplyr(frch.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
moos.precip.discharge$twentyfour <- rollapplyr(moos.precip.discharge$mean, 24, sum, na.rm = TRUE, fill = NA, partial = TRUE)
moos.precip.discharge$fourtyeight <- rollapplyr(moos.precip.discharge$mean, 48, sum, na.rm = TRUE, fill = NA, partial = TRUE)
# Greater than 5 mm #
moos.five.twenty.four <- moos.precip.discharge[which(moos.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
moos.five.fourty.eight <- moos.precip.discharge[which(moos.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
frch.five.twenty.four <- frch.precip.discharge[which(frch.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
frch.five.fourty.eight <- frch.precip.discharge[which(frch.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
# Greater than 10 #
moos.ten.twenty.four <- moos.precip.discharge[which(moos.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
moos.ten.fourty.eight <- moos.precip.discharge[which(moos.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
frch.ten.twenty.four <- frch.precip.discharge[which(frch.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
frch.ten.fourty.eight <- frch.precip.discharge[which(frch.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
# The point of this plot is to show the time series precip plot with chemistry overlain with the alarm bells to pick which storms need to be clipped out
## FRCH ##
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
abline(v = as.POSIXct(frch.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(frch.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
par(new = T)
plot(frch.final.discharge.2015$Q ~ frch.final.discharge.2015$datetimeAK, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH.2015$NO3 * 20 ~ FRCH.2015$datetimeAK, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH.2015$fDOM * 20 ~ FRCH.2015$datetimeAK, type="l", xlab="", ylab="", col="brown",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH.2015$SPC * 20 ~ FRCH.2015$datetimeAK, type="l", xlab="", ylab="", col="red",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH.2015$Turb * 20 ~ FRCH.2015$datetimeAK, type="l", xlab="", ylab="", col="blue",
xlim = as.POSIXct(c("2015-05-01 0:00:00","2015-10-31 00:00:00"), tz="America/Anchorage"))
# storm 1 #
plot(FRCH$Q ~ FRCH$datetimeAK, type="p", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2015-07-01 00:00:00","2015-07-15 23:45:00"), tz="America/Anchorage"),
ylim = c(0, 2000))
par(new = T)
plot(CPCRW$mean ~ CPCRW$datetimeAK, type="h",
xlim = as.POSIXct(c("2015-07-01 00:00:00","2015-07-15 23:45:00"), tz="America/Anchorage"),
ylim = c(8,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(frch.five.fourty.eight$datetimeAK), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(frch.five.twenty.four$datetimeAK), col="green", lwd = 0.1)
abline(v= as.POSIXct("2015-07-01 23:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2015-07-04 23:30:00", tz="America/Anchorage"), col="purple")
FRCH_storm1_07_01 = FRCH[FRCH$datetimeAK > as.POSIXct("2015-07-01 23:30:00", tz="America/Anchorage") &
FRCH$datetimeAK < as.POSIXct("2015-07-04 23:30:00", tz="America/Anchorage"),]
View(FRCH_storm1_07_01)
library(here)
library(tidyverse)
library(nlme)
library(forecast)
library(stats)
library(readr)
library(ggplot2)
library(plotly)
library(GGally)
library(ggpmisc)
library(ggpubr)
library(ggExtra)
library(lubridate)
library(nlme)
library(MuMIn)
library(multcomp)
library(lme4)
library(car)
library(ggeffects)
library(dotwhisker)
library(broom)
library(jtools)
library(sjPlot)
library(AICcmodavg)
library(gtable)
library(gridExtra)
library(grid)
