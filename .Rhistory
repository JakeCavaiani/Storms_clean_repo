rep("storm1a", 111),
rep("storm1b", 234),
rep("storm1c", 406),
rep("storm3", 342),
rep("storm4", 318),
rep("storm6a", 107),
rep("storm6b", 511),
rep("storm8", 91))
chem.2020 <- read.csv(here("processed_sensor_data", "2020", "SUNA.EXO.int.corr.lab_2020.csv"))
chem.2020 <- chem.2020[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem.2020$datetimeAK <- ymd_hms(chem.2020$datetimeAK) # converting character to datetime
chem.2020$datetimeAK <- force_tz(chem.2020$datetimeAK, "America/Anchorage") # converting character to datetime
names(chem.2020) <- c("datetimeAK", "site.ID", "fDOM.QSU", "SpCond.ÂµS.cm", "Turbidity.FNU", "nitrateuM", "ABS_254")
VAUL_storms$DateTime <- as.POSIXct(VAUL_storms$DateTime)
VAUL.2020.storms.1<- left_join(VAUL_storms, VAUL_RainGauge_2020, by = "DateTime")
VAUL.2020.storms.1<- left_join(VAUL.2020.storms.1, airtempmean, by = "DateTime")
names(VAUL.2020.storms.1)[names(VAUL.2020.storms.1) == ''] <- 'x'
VAUL.2020.per.storm.1 <- VAUL.2020.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(inst_rainfall_mm), list(precip = sum), na.rm = TRUE)
temp <- VAUL.2020.storms.1 %>% group_by(storm.num) %>%
summarise_at(vars(airtemp_100.1000cm_mean), list(temp = mean), na.rm = TRUE) # finding the mean temperature for each storm event
VAUL.2020.per.storm.1$temp <- temp$temp
VAUL.2020 <-  subset(chem.2020, site.ID == "VAUL")
VAUL.2020$DateTime <- as.POSIXct(VAUL.2020$datetimeAK)
VAUL.2020 <- left_join(VAUL.2020, VAUL_RainGauge_2020, by = "DateTime")
VAUL.2020 <- left_join(VAUL.2020, airtempmean, by = "DateTime")
VAUL.2020$week <- rollapplyr(VAUL.2020$inst_rainfall_mm, 672, sum, na.rm = TRUE, fill = NA, partial = TRUE)
VAUL.2020$month <- rollapplyr(VAUL.2020$inst_rainfall_mm, 2688, sum, na.rm = TRUE, fill = NA, partial = TRUE)
VAUL.2020$ThreeMonth <- rollapplyr(VAUL.2020$inst_rainfall_mm, 8064, sum, na.rm = TRUE, fill = NA, partial = TRUE)
VAUL.2020$temp.week <- rollapplyr(VAUL.2020$airtemp_100.1000cm_mean, 672, mean, na.rm = TRUE, fill = NA, partial = TRUE)
VAUL.2020.1 <- left_join(VAUL.2020.storms.1, VAUL.2020, by = "DateTime") # week month and 3 month precip totals
VAUL.2020.per.storm.2 <- VAUL.2020.1 %>% group_by(storm.num) %>%
summarise_at(vars(week), list(precip.week = first), na.rm = TRUE) # grouping weekly precip leading up to storm event
VAUL.2020.per.storm.3 <- VAUL.2020.1 %>% group_by(storm.num) %>%
summarise_at(vars(month), list(precip.month = first), na.rm = TRUE) # groouping monthly precip leading up to a storm
VAUL.2020.per.storm.4 <- VAUL.2020.1 %>% group_by(storm.num) %>%
summarise_at(vars(ThreeMonth), list(ThreeMonth = first), na.rm = TRUE) # grouping 3 month precip leading up to a storm
VAUL.2020.per.storm.5 <- VAUL.2020.1 %>% group_by(storm.num) %>%
summarise_at(vars(temp.week), list(temp.week = first), na.rm = TRUE) # grouping 3 month precip leading up to a storm
HI.mean.precip.vaul.NO3 <- subset(HI.mean.precip.response, year == "2020" & site.ID == "VAUL" & response == "NO3")
HI.mean.precip.vaul.fDOM <- subset(HI.mean.precip.response, year == "2020" & site.ID == "VAUL" & response == "fDOM")
HI.mean.precip.vaul.SPC <- subset(HI.mean.precip.response, year == "2020" & site.ID == "VAUL" & response == "SPC")
HI.mean.precip.vaul.turb <- subset(HI.mean.precip.response, year == "2020" & site.ID == "VAUL" & response == "turb")
HI.mean.precip.vaul.abs <- subset(HI.mean.precip.response, year == "2020" & site.ID == "VAUL" & response == "abs")
HI.vaul.no3.2020 <- left_join(HI.mean.precip.vaul.NO3, VAUL.2020.per.storm.1, by = "storm.num")
HI.vaul.no3.2020 <- left_join(HI.vaul.no3.2020, VAUL.2020.per.storm.2, by = "storm.num")
HI.vaul.no3.2020 <- left_join(HI.vaul.no3.2020, VAUL.2020.per.storm.3, by = "storm.num")
HI.vaul.no3.2020 <- left_join(HI.vaul.no3.2020, VAUL.2020.per.storm.4, by = "storm.num")
HI.vaul.no3.2020 <- left_join(HI.vaul.no3.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.no3 <- lm(HI.vaul.no3.2020$HI ~ HI.vaul.no3.2020$precip) # model one with just total precip
vaul.lm.no3 <- lm(HI.vaul.no3.2020$HI ~ HI.vaul.no3.2020$precip.week) # model one with just total precip
vaul.lm.no3 <- lm(HI.vaul.no3.2020$HI ~ HI.vaul.no3.2020$precip.month) # model one with just total precip
vaul.lm.no3 <- lm(HI.vaul.no3.2020$HI ~ HI.vaul.no3.2020$ThreeMonth) # model one with just total precip
vaul.formula <- y ~ x
daa <- HI.vaul.no3.2020 %>%
ggplot(aes(x=precip,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("Precip") +
ylab("HI-Solute Storage") # plot model
dbb <- HI.vaul.no3.2020 %>%
ggplot(aes(x=precip.week,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("one-week Precip") +
ylab("HI-Solute Storage") # plot model
dcc <- HI.vaul.no3.2020 %>%
ggplot(aes(x=precip.month,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("one-month Precip") +
ylab("HI-Solute Storage") # plot model
dcd <- HI.vaul.no3.2020 %>%
ggplot(aes(x=ThreeMonth,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("Three-month Precip") +
ylab("HI-Solute Storage") # plot model
HI.vaul.fDOM.2020 <- left_join(HI.mean.precip.vaul.fDOM, VAUL.2020.per.storm.1, by = "storm.num")
HI.vaul.fDOM.2020 <- left_join(HI.vaul.fDOM.2020, VAUL.2020.per.storm.2, by = "storm.num")
HI.vaul.fDOM.2020 <- left_join(HI.vaul.fDOM.2020, VAUL.2020.per.storm.3, by = "storm.num")
HI.vaul.fDOM.2020 <- left_join(HI.vaul.fDOM.2020, VAUL.2020.per.storm.4, by = "storm.num")
HI.vaul.fDOM.2020 <- left_join(HI.vaul.fDOM.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.fDOM <- lm(HI.vaul.fDOM.2020$HI ~ HI.vaul.fDOM.2020$precip) # model one with just total precip
vaul.lm.fDOM.1 <- lm(HI.vaul.fDOM.2020$HI ~ HI.vaul.fDOM.2020$precip.week) # model one with just total precip
vaul.lm.fDOM.2 <- lm(HI.vaul.fDOM.2020$HI ~ HI.vaul.fDOM.2020$precip.month) # model one with just total precip
vaul.lm.fDOM.3 <- lm(HI.vaul.fDOM.2020$HI ~ HI.vaul.fDOM.2020$ThreeMonth) # model one with just total precip
dee <- HI.vaul.fDOM.2020 %>%
ggplot(aes(x=precip,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("Precip") +
ylab("HI-Solute Storage") # plot model
dff <- HI.vaul.fDOM.2020 %>%
ggplot(aes(x=precip.week,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("one-week Precip") +
ylab("HI-Solute Storage") # plot model
dgg <- HI.vaul.fDOM.2020 %>%
ggplot(aes(x=precip.month,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("one-month Precip") +
ylab("HI-Solute Storage") # plot model
dhh <- HI.vaul.fDOM.2020 %>%
ggplot(aes(x=ThreeMonth,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("Three-month Precip") +
ylab("HI-Solute Storage") # plot model
HI.vaul.SPC.2020 <- left_join(HI.mean.precip.vaul.SPC, VAUL.2020.per.storm.1, by = "storm.num")
HI.vaul.SPC.2020 <- left_join(HI.vaul.SPC.2020, VAUL.2020.per.storm.2, by = "storm.num")
HI.vaul.SPC.2020 <- left_join(HI.vaul.SPC.2020, VAUL.2020.per.storm.3, by = "storm.num")
HI.vaul.SPC.2020 <- left_join(HI.vaul.SPC.2020, VAUL.2020.per.storm.4, by = "storm.num")
HI.vaul.SPC.2020 <- left_join(HI.vaul.SPC.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.SPC <- lm(HI.vaul.SPC.2020$HI ~ HI.vaul.SPC.2020$precip) # model one with just total precip
vaul.lm.SPC.2 <- lm(HI.vaul.SPC.2020$HI ~ HI.vaul.SPC.2020$precip.week) # model one with just total precip
vaul.lm.SPC.3 <- lm(HI.vaul.SPC.2020$HI ~ HI.vaul.SPC.2020$precip.month) # model one with just total precip
vaul.lm.SPC.4 <- lm(HI.vaul.SPC.2020$HI ~ HI.vaul.SPC.2020$ThreeMonth) # model one with just total precip
dii <- HI.vaul.SPC.2020 %>%
ggplot(aes(x=precip,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("Precip") +
ylab("HI-Solute Storage") # plot model
djj <- HI.vaul.SPC.2020 %>%
ggplot(aes(x=precip.week,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("one-week Precip") +
ylab("HI-Solute Storage") # plot model
dkk <- HI.vaul.SPC.2020 %>%
ggplot(aes(x=precip.month,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("one-month Precip") +
ylab("HI-Solute Storage") # plot model
dll <- HI.vaul.SPC.2020 %>%
ggplot(aes(x=ThreeMonth,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("Three-month Precip") +
ylab("HI-Solute Storage") # plot model
HI.vaul.turb.2020 <- left_join(HI.mean.precip.vaul.turb, VAUL.2020.per.storm.1, by = "storm.num")
HI.vaul.turb.2020 <- left_join(HI.vaul.turb.2020, VAUL.2020.per.storm.2, by = "storm.num")
HI.vaul.turb.2020 <- left_join(HI.vaul.turb.2020, VAUL.2020.per.storm.3, by = "storm.num")
HI.vaul.turb.2020 <- left_join(HI.vaul.turb.2020, VAUL.2020.per.storm.4, by = "storm.num")
HI.vaul.turb.2020 <- left_join(HI.vaul.turb.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.turb <- lm(HI.vaul.turb.2020$HI ~ HI.vaul.turb.2020$precip) # model one with just total precip
vaul.lm.turb.2 <- lm(HI.vaul.turb.2020$HI ~ HI.vaul.turb.2020$precip.week) # model one with just total precip
vaul.lm.turb.3 <- lm(HI.vaul.turb.2020$HI ~ HI.vaul.turb.2020$precip.month) # model one with just total precip
vaul.lm.turb.4 <- lm(HI.vaul.turb.2020$HI ~ HI.vaul.turb.2020$ThreeMonth) # model one with just total precip
dmm <- HI.vaul.turb.2020 %>%
ggplot(aes(x=precip,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("Precip") +
ylab("HI-Solute Storage") # plot model
dnn <- HI.vaul.turb.2020 %>%
ggplot(aes(x=precip.week,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("one-week Precip") +
ylab("HI-Solute Storage") # plot model
doo <- HI.vaul.turb.2020 %>%
ggplot(aes(x=precip.month,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("one-month Precip") +
ylab("HI-Solute Storage") # plot model
dpp <- HI.vaul.turb.2020 %>%
ggplot(aes(x=ThreeMonth,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("Three-month Precip") +
ylab("HI-Solute Storage") # plot model
sum.time <- VAUL.2020.storms.1 %>%
mutate(grp=data.table::rleid(storm.num))%>%
group_by(grp) %>%
summarise(storm.num=max(storm.num),TOTAL.TIME=difftime(max(DateTime),
min(DateTime),units="hour"))%>%
group_by(storm.num) %>%
summarise(TOTAL.TIME=sum(TOTAL.TIME)) # creating a total time column
HI.vaul.no3.2.2020 <- left_join(HI.vaul.no3.2020, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.vaul.no3.2.2020$TOTAL.TIME <- as.numeric(HI.vaul.no3.2.2020$TOTAL.TIME)
HI.vaul.no3.2.2020$Intensity <- HI.vaul.no3.2.2020$precip/HI.vaul.no3.2.2020$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
vaul.lm.no3.2 <- lm(HI.vaul.no3.2.2020$HI ~ HI.vaul.no3.2.2020$precip + HI.vaul.no3.2.2020$Intensity) # model one with total precip and intensity
dqq <- HI.vaul.no3.2.2020 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.fDOM.2.2020 <- left_join(HI.vaul.fDOM.2020, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.vaul.fDOM.2.2020$TOTAL.TIME <- as.numeric(HI.vaul.fDOM.2.2020$TOTAL.TIME)
HI.vaul.fDOM.2.2020$Intensity <- HI.vaul.fDOM.2.2020$precip/HI.vaul.fDOM.2.2020$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
vaul.lm.fDOM.2 <- lm(HI.vaul.fDOM.2.2020$HI ~ HI.vaul.fDOM.2.2020$precip + HI.vaul.fDOM.2.2020$Intensity) # model one with total precip and intensity
drr <- HI.vaul.fDOM.2.2020 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.SPC.2.2020 <- left_join(HI.vaul.SPC.2020, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.vaul.SPC.2.2020$TOTAL.TIME <- as.numeric(HI.vaul.SPC.2.2020$TOTAL.TIME)
HI.vaul.SPC.2.2020$Intensity <- HI.vaul.SPC.2.2020$precip/HI.vaul.SPC.2.2020$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
vaul.lm.SPC.2 <- lm(HI.vaul.SPC.2.2020$HI ~ HI.vaul.SPC.2.2020$precip + HI.vaul.SPC.2.2020$Intensity) # model one with total precip and intensity
dss <- HI.vaul.SPC.2.2020 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.turb.2.2020 <- left_join(HI.vaul.turb.2020, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.vaul.turb.2.2020$TOTAL.TIME <- as.numeric(HI.vaul.turb.2.2020$TOTAL.TIME)
HI.vaul.turb.2.2020$Intensity <- HI.vaul.turb.2.2020$precip/HI.vaul.turb.2.2020$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
vaul.lm.turb.2 <- lm(HI.vaul.turb.2.2020$HI ~ HI.vaul.turb.2.2020$precip + HI.vaul.turb.2.2020$Intensity) # model one with total precip and intensity
dtt <- HI.vaul.turb.2.2020 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
# day of year #
VAUL.2020.1$day <- julian(VAUL.2020.1$DateTime, origin = "2020-01-01", tz = 'America/Anchorage')
VAUL.2020.1$day <- as.numeric(VAUL.2020.1$day)
VAUL.2020.per.storm.5 <- VAUL.2020.1 %>% group_by(storm.num) %>%
summarise_at(vars(day), list(doy = first), na.rm = TRUE) # grouping 3 month precip leading up to a storm
HI.vaul.no3.2.2020 <- left_join(HI.vaul.no3.2.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.no3.5 <- lm(HI.vaul.no3.2.2020$HI ~ HI.vaul.no3.2.2020$doy)
duu <- HI.vaul.no3.2.2020 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL NO3") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.fDOM.2.2020 <- left_join(HI.vaul.fDOM.2.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.fDOM.5 <- lm(HI.vaul.fDOM.2.2020$HI ~ HI.vaul.fDOM.2.2020$doy)
dtb <- HI.vaul.fDOM.2.2020 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL fDOM") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.SPC.2.2020 <- left_join(HI.vaul.SPC.2.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.SPC.5 <- lm(HI.vaul.SPC.2.2020$HI ~ HI.vaul.SPC.2.2020$doy)
dvv <- HI.vaul.SPC.2.2020 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL SPC") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.vaul.turb.2.2020 <- left_join(HI.vaul.turb.2.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.turb.5 <- lm(HI.vaul.turb.2.2020$HI ~ HI.vaul.turb.2.2020$doy)
dww <- HI.vaul.turb.2.2020 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("VAUL turb") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
#plot_grid(daa,dbb,dcc,dcd,dee,dff,dgg,dhh,dii,djj,dkk,dll,dmm,dnn,doo,dpp,dqq,drr,dss,dtt, duu,dtb,dvv,dww,
#          ncol = 4)
# abs #
HI.vaul.abs.2020 <- left_join(HI.mean.precip.vaul.abs, VAUL.2020.per.storm.1, by = "storm.num")
HI.vaul.abs.2020 <- left_join(HI.vaul.abs.2020, VAUL.2020.per.storm.2, by = "storm.num")
HI.vaul.abs.2020 <- left_join(HI.vaul.abs.2020, VAUL.2020.per.storm.3, by = "storm.num")
HI.vaul.abs.2020 <- left_join(HI.vaul.abs.2020, VAUL.2020.per.storm.4, by = "storm.num")
HI.vaul.abs.2020 <- left_join(HI.vaul.abs.2020, VAUL.2020.per.storm.5, by = "storm.num")
vaul.lm.abs <- lm(HI.vaul.abs.2020$HI ~ HI.vaul.abs.2020$precip) # model one with just total precip
vaul.lm.abs.2 <- lm(HI.vaul.abs.2020$HI ~ HI.vaul.abs.2020$precip.week) # model one with just total precip
vaul.lm.abs.3 <- lm(HI.vaul.abs.2020$HI ~ HI.vaul.abs.2020$precip.month) # model one with just total precip
vaul.lm.abs.4 <- lm(HI.vaul.abs.2020$HI ~ HI.vaul.abs.2020$ThreeMonth) # model one with just total precip
vaul.lm.abs.5 <- lm(HI.vaul.abs.2020$HI ~ HI.vaul.abs.2020$temp) # model one with just total precip
HI.vaul.abs.2.2020 <- left_join(HI.vaul.abs.2020, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.vaul.abs.2.2020$TOTAL.TIME <- as.numeric(HI.vaul.abs.2.2020$TOTAL.TIME)
HI.vaul.abs.2.2020$Intensity <- HI.vaul.abs.2.2020$precip/HI.vaul.abs.2.2020$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
HI.vaul.2020 <- rbind(HI.vaul.no3.2.2020, HI.vaul.fDOM.2.2020,
HI.vaul.SPC.2.2020, HI.vaul.turb.2.2020,
HI.vaul.abs.2.2020) # merging all responses together
HI.vaul.2020$burn <- "unburned" # adding a burn column
HI.vaul.2020$pf <- "high" # adding a pf column
write.csv(HI.vaul.2020, here("Output_from_analysis", "04_Antecedent_Conditions", "2020", "HI.vaul.2020.csv"))
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(SLOPE)
library(wesanderson)
library(ggpubr)
library(dataRetrieval)
setwd("~/GitHub/Storms_clean_repo/Storm_Events/2020")
storm_file_list_beta <- list.files(path="FRCH_MOOS_VAUL_POKE_STRT_CARI/",
recursive=F,
pattern=".csv",
full.names=TRUE)
storm_list_beta<-do.call("list", lapply(storm_file_list_beta,
read.csv,
stringsAsFactors=FALSE,
header=T, row.names=1))
storm_file_list_beta = sub("FRCH_MOOS_VAUL_POKE_STRT_CARI//", storm_file_list_beta, replacement = "")
# storm_file_list_beta = sub("~/Documents/Storms_clean_repo/Storm_Events/2020/FRCH_MOOS_VAUL_POKE_STRT_CARI//", storm_file_list_beta, replacement = "")
storm_file_list_beta = sub(".csv", storm_file_list_beta, replacement = "")
names(storm_list_beta) = storm_file_list_beta
FRCH_storm_list_beta = storm_list_beta[c(1:84)] #84
STRT_storm_list_beta = storm_list_beta[c(85:162)] #78
VAUL_storm_list_beta = storm_list_beta[c(163:240)] #102
FRCH_NO3_storm_list_beta = FRCH_storm_list_beta[c(grep("NO3", names(FRCH_storm_list_beta)))]
FRCH_fDOM_storm_list_beta = FRCH_storm_list_beta[c(grep("fDOM", names(FRCH_storm_list_beta)))]
FRCH_SpCond_storm_list_beta = FRCH_storm_list_beta[c(grep("SPC", names(FRCH_storm_list_beta)))]
FRCH_turb_storm_list_beta = FRCH_storm_list_beta[c(grep("Turb", names(FRCH_storm_list_beta)))]
FRCH_abs_storm_list_beta = FRCH_storm_list_beta[c(grep("abs", names(FRCH_storm_list_beta)))]
FRCH_Q_storm_list_beta = FRCH_storm_list_beta[c(grep("Q", names(FRCH_storm_list_beta)))]
MOOS_NO3_storm_list_beta = MOOS_storm_list_beta[c(grep("NO3", names(MOOS_storm_list_beta)))]
VAUL_NO3_storm_list_beta = VAUL_storm_list_beta[c(grep("NO3", names(VAUL_storm_list_beta)))]
VAUL_fDOM_storm_list_beta = VAUL_storm_list_beta[c(grep("fDOM", names(VAUL_storm_list_beta)))]
VAUL_SpCond_storm_list_beta = VAUL_storm_list_beta[c(grep("SPC", names(VAUL_storm_list_beta)))]
VAUL_turb_storm_list_beta = VAUL_storm_list_beta[c(grep("Turb", names(VAUL_storm_list_beta)))]
VAUL_abs_storm_list_beta = VAUL_storm_list_beta[c(grep("abs", names(VAUL_storm_list_beta)))]
VAUL_Q_storm_list_beta = VAUL_storm_list_beta[c(grep("Q", names(VAUL_storm_list_beta)))]
# VAUL
for(i in 1:length(VAUL_Q_storm_list_beta)){
VAUL_Q_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_Q_storm_list_beta[[i]][["datavalue"]]-min(VAUL_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_Q_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(VAUL_NO3_storm_list_beta)){
VAUL_NO3_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_NO3_storm_list_beta[[i]][["datavalue"]]-min(VAUL_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_NO3_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(VAUL_fDOM_storm_list_beta)){
VAUL_fDOM_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_fDOM_storm_list_beta[[i]][["datavalue"]]-min(VAUL_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_fDOM_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(VAUL_SpCond_storm_list_beta)){
VAUL_SpCond_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_SpCond_storm_list_beta[[i]][["datavalue"]]-min(VAUL_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_SpCond_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(VAUL_turb_storm_list_beta)){
VAUL_turb_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_turb_storm_list_beta[[i]][["datavalue"]]-min(VAUL_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_turb_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(VAUL_abs_storm_list_beta)){
VAUL_abs_storm_list_beta[[i]][["datavalue.norm"]] =
(VAUL_abs_storm_list_beta[[i]][["datavalue"]]-min(VAUL_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(VAUL_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(VAUL_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
VAUL_NO3_storm <- map2_df(VAUL_Q_storm_list_beta, VAUL_NO3_storm_list_beta, inner_join, by = "valuedatetime")
# VAUL #
VAUL_NO3_storm$storm.ID = c(rep("storm10", 195),
rep("storm11", 399),
rep("storm12", 171),
rep("storm13", 222),
rep("storm14", 211),
rep("storm1a", 111),
rep("storm1b", 234),
rep("storm1c", 406),
rep("storm3", 342),
rep("storm4", 318),
rep("storm6a", 107),
rep("storm6b", 511),
rep("storm8", 91))
