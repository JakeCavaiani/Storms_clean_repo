for(i in 1:length(FRCH_abs_storm_list_beta)){
FRCH_abs_storm_list_beta[[i]][["datavalue.norm"]] =
(FRCH_abs_storm_list_beta[[i]][["datavalue"]]-min(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(FRCH_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
for(i in 1:length(MOOS_abs_storm_list_beta)){
MOOS_abs_storm_list_beta[[i]][["datavalue.norm"]] =
(MOOS_abs_storm_list_beta[[i]][["datavalue"]]-min(MOOS_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))/
(max(MOOS_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T)-min(MOOS_abs_storm_list_beta[[i]][["datavalue"]], na.rm=T))
}
###### NO3  #######
FRCH_NO3_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_NO3_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_NO3_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_NO3_storm_list_beta, inner_join, by = "valuedatetime")
CARI_NO3_storm <- map2_df(CARI_Q_storm_list_beta, CARI_NO3_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_NO3_storm$storm.ID = c(rep("storm1", 142),
rep("storm10", 689),
rep("storm11a", 353),
rep("storm2a", 364),
rep("storm3", 196),
rep("storm4a", 88),
rep("storm4b", 153),
rep("storm5", 331),
rep("storm6", 303),
rep("storm7", 129),
rep("storm8a", 175),
rep("storm9", 99))
names(FRCH_NO3_storm) <- c("DateTime", "Q", "Q.norm", "NO3", "NO3.norm", "storm.ID")
FRCH_NO3_storm$site.ID <- "FRCH"
cols <- c("NO3.norm","Q.norm")
FRCH_NO3_storm[cols] <- log(FRCH_NO3_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_NO3_storm <- FRCH_NO3_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_NO3_storm_ascending <- filter(FRCH_NO3_storm, limb == "ascending")
FRCH_NO3_storm_ascending <- FRCH_NO3_storm_ascending[is.finite(FRCH_NO3_storm_ascending$Q.norm) & is.finite(FRCH_NO3_storm_ascending$NO3.norm), ]
beta.all.no3 <- FRCH_NO3_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(NO3.norm, Q.norm)) # this works just like the beta one that is for an individual site
frch.2018.ci <- FRCH_NO3_storm_ascending %>%
group_by(storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(NO3.norm ~ Q.norm, data = .x)))
# MOOS #
MOOS_NO3_storm$storm.ID = c(rep("storm10", 432),
rep("storm11a", 420),
rep("storm2a", 412),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 335),
rep("storm7", 176),
rep("storm8a", 181),
rep("storm9", 109))
names(MOOS_NO3_storm) <- c("DateTime", "Q", "Q.norm", "NO3", "NO3.norm", "storm.ID")
MOOS_NO3_storm$site.ID <- "MOOS"
MOOS_NO3_storm[cols] <- log(MOOS_NO3_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_NO3_storm <- MOOS_NO3_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_NO3_storm_ascending <- filter(MOOS_NO3_storm, limb == "ascending")
MOOS_NO3_storm_ascending <- MOOS_NO3_storm_ascending[is.finite(MOOS_NO3_storm_ascending$Q.norm) & is.finite(MOOS_NO3_storm_ascending$NO3.norm), ]
beta.all.no3.moos.with.all <- MOOS_NO3_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, NO3.norm)) # this works just like the beta one that is for an individual site
moos.2018.ci <- MOOS_NO3_storm_ascending %>%
group_by(storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(NO3.norm ~ Q.norm, data = .x)))
# CARI #
CARI_NO3_storm$storm.ID = c(rep("storm1", 317),
rep("storm10", 254),
rep("storm11", 215),
rep("storm12a", 419),
rep("storm12b", 519),
rep("storm2", 181),
rep("storm3", 121),
rep("storm4a", 277),
rep("storm5a", 777),
rep("storm6", 650),
rep("storm7", 155),
rep("storm8", 191),
rep("storm9", 367))
names(CARI_NO3_storm) <- c("DateTime", "Q", "Q.norm", "NO3", "NO3.norm", "storm.ID")
CARI_NO3_storm$site.ID <- "CARI"
CARI_NO3_storm[cols] <- log(CARI_NO3_storm[cols]) # making concentrations and Q log transformed
CARI_NO3_storm <- CARI_NO3_storm[is.finite(CARI_NO3_storm$Q.norm),] # removing +- inf
CARI_NO3_storm <- CARI_NO3_storm[is.finite(CARI_NO3_storm$NO3.norm),]# removing +- inf
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_NO3_storm <- CARI_NO3_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_NO3_storm_ascending <- filter(CARI_NO3_storm, limb == "ascending")
CARI_NO3_storm_ascending <- CARI_NO3_storm_ascending[is.finite(CARI_NO3_storm_ascending$Q.norm) & is.finite(CARI_NO3_storm_ascending$NO3.norm), ]
beta.all.no3.cari <- CARI_NO3_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, NO3.norm)) # this works just like the beta one that is for an individual site
All_NO3_storm <- rbind(FRCH_NO3_storm_ascending, MOOS_NO3_storm_ascending,
CARI_NO3_storm_ascending)
beta.all.no3 <- All_NO3_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, NO3.norm)) # this works just like the beta one that is for an individual site
beta.all.no3$response_var <- "NO3"
cari.2018.ci <- CARI_NO3_storm_ascending %>%
group_by(storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(NO3.norm ~ Q.norm, data = .x)))
all.2018.ci.no3 <- All_NO3_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(NO3.norm ~ Q.norm, data = .x)))
all.2018.ci.no3$response_var <- "NO3"
FRCH_fDOM_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_fDOM_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_fDOM_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_fDOM_storm_list_beta, inner_join, by = "valuedatetime")
CARI_fDOM_storm <- map2_df(CARI_Q_storm_list_beta, CARI_fDOM_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_fDOM_storm$storm.ID = c(rep("storm1", 142),
rep("storm10", 689),
rep("storm11a", 353),
rep("storm2a", 364),
rep("storm3", 196),
rep("storm4a", 88),
rep("storm4b", 153),
rep("storm5", 331),
rep("storm6", 303),
rep("storm7", 129),
rep("storm8a", 175),
rep("storm9", 99))
names(FRCH_fDOM_storm) <- c("DateTime", "Q", "Q.norm", "fDOM", "fDOM.norm", "storm.ID")
FRCH_fDOM_storm$site.ID <- "FRCH"
cols <- c("fDOM.norm","Q.norm")
FRCH_fDOM_storm[cols] <- log(FRCH_fDOM_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_fDOM_storm <- FRCH_fDOM_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_fDOM_storm_ascending <- filter(FRCH_fDOM_storm, limb == "ascending")
FRCH_fDOM_storm_ascending <- FRCH_fDOM_storm_ascending[is.finite(FRCH_fDOM_storm_ascending$Q.norm) & is.finite(FRCH_fDOM_storm_ascending$fDOM.norm), ]
beta.all.fDOM <- FRCH_fDOM_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, fDOM.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_fDOM_storm$storm.ID = c(rep("storm1", 58),
rep("storm10", 432),
rep("storm11a", 90),
rep("storm11b", 9),
rep("storm12", 301),
rep("storm2a", 75),
rep("storm2b", 145),
rep("storm2c", 183),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 333),
rep("storm7", 176),
rep("storm8a", 78),
rep("storm8b", 100),
rep("storm9", 106))
# MOOS #
MOOS_fDOM_storm$storm.ID = c(rep("storm10", 432),
rep("storm11a", 420),
rep("storm2a", 412),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 335),
rep("storm7", 176),
rep("storm8a", 181),
rep("storm9", 109))
names(MOOS_fDOM_storm) <- c("DateTime", "Q", "Q.norm", "fDOM", "fDOM.norm", "storm.ID")
MOOS_fDOM_storm$site.ID <- "MOOS"
MOOS_fDOM_storm[cols] <- log(MOOS_fDOM_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_fDOM_storm <- MOOS_fDOM_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_fDOM_storm_ascending <- filter(MOOS_fDOM_storm, limb == "ascending")
MOOS_fDOM_storm_ascending <- MOOS_fDOM_storm_ascending[is.finite(MOOS_fDOM_storm_ascending$Q.norm) & is.finite(MOOS_fDOM_storm_ascending$fDOM.norm), ]
beta.all.fDOM.moos.with.all <- MOOS_fDOM_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, fDOM.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_fDOM_storm$storm.ID = c(rep("storm1", 317),
rep("storm10", 254),
rep("storm11", 215),
rep("storm12a", 419),
rep("storm12b", 519),
rep("storm2", 181),
rep("storm3", 121),
rep("storm4a", 277),
rep("storm5a", 777),
rep("storm6", 650),
rep("storm7", 155),
rep("storm8", 191),
rep("storm9", 367))
names(CARI_fDOM_storm) <- c("DateTime", "Q", "Q.norm", "fDOM", "fDOM.norm", "storm.ID")
CARI_fDOM_storm$site.ID <- "CARI"
CARI_fDOM_storm[cols] <- log(CARI_fDOM_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_fDOM_storm <- CARI_fDOM_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_fDOM_storm_ascending <- filter(CARI_fDOM_storm, limb == "ascending")
CARI_fDOM_storm_ascending <- CARI_fDOM_storm_ascending[is.finite(CARI_fDOM_storm_ascending$Q.norm) & is.finite(CARI_fDOM_storm_ascending$fDOM.norm), ]
beta.all.fdom.cari <- CARI_fDOM_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, fDOM.norm)) # this works just like the beta one that is for an individual site
All_fDOM_storm <- rbind(FRCH_fDOM_storm_ascending, MOOS_fDOM_storm_ascending,
CARI_fDOM_storm_ascending)
beta.all.fDOM <- All_fDOM_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, fDOM.norm)) # this works just like the beta one that is for an individual site
beta.all.fDOM$response_var <- "fDOM"
all.2018.ci.fDOM <- All_fDOM_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(fDOM.norm ~ Q.norm, data = .x)))
all.2018.ci.fDOM$response_var <- "fDOM"
##### SPC #####
FRCH_SPC_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_SpCond_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_SPC_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_SpCond_storm_list_beta, inner_join, by = "valuedatetime")
CARI_SPC_storm <- map2_df(CARI_Q_storm_list_beta, CARI_SpCond_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_SPC_storm$storm.ID = c(rep("storm1", 142),
rep("storm10", 689),
rep("storm11a", 353),
rep("storm2a", 364),
rep("storm3", 196),
rep("storm4a", 88),
rep("storm4b", 153),
rep("storm5", 331),
rep("storm6", 303),
rep("storm7", 129),
rep("storm8a", 175),
rep("storm9", 99))
names(FRCH_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
FRCH_SPC_storm$site.ID <- "FRCH"
cols <- c("SPC.norm","Q.norm")
FRCH_SPC_storm[cols] <- log(FRCH_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_SPC_storm <- FRCH_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_SPC_storm_ascending <- filter(FRCH_SPC_storm, limb == "ascending")
FRCH_SPC_storm_ascending <- FRCH_SPC_storm_ascending[is.finite(FRCH_SPC_storm_ascending$Q.norm) & is.finite(FRCH_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC <- FRCH_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# MOOS #
MOOS_SPC_storm$storm.ID = c(rep("storm10", 432),
rep("storm11a", 420),
rep("storm2a", 412),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 335),
rep("storm7", 176),
rep("storm8a", 181),
rep("storm9", 109))
names(MOOS_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
MOOS_SPC_storm$site.ID <- "MOOS"
MOOS_SPC_storm[cols] <- log(MOOS_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_SPC_storm <- MOOS_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_SPC_storm_ascending <- filter(MOOS_SPC_storm, limb == "ascending")
MOOS_SPC_storm_ascending <- MOOS_SPC_storm_ascending[is.finite(MOOS_SPC_storm_ascending$Q.norm) & is.finite(MOOS_SPC_storm_ascending$SPC.norm), ]
beta.all.SPC.moos.with.all <- MOOS_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_SPC_storm$storm.ID = c(rep("storm1", 317),
rep("storm10", 254),
rep("storm11", 215),
rep("storm12a", 419),
rep("storm12b", 519),
rep("storm2", 181),
rep("storm3", 121),
rep("storm4a", 277),
rep("storm5a", 777),
rep("storm6", 650),
rep("storm7", 155),
rep("storm8", 191),
rep("storm9", 367))
names(CARI_SPC_storm) <- c("DateTime", "Q", "Q.norm", "SPC", "SPC.norm", "storm.ID")
CARI_SPC_storm$site.ID <- "CARI"
CARI_SPC_storm[cols] <- log(CARI_SPC_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_SPC_storm <- CARI_SPC_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_SPC_storm_ascending <- filter(CARI_SPC_storm, limb == "ascending")
CARI_SPC_storm_ascending <- CARI_SPC_storm_ascending[is.finite(CARI_SPC_storm_ascending$Q.norm) & is.finite(CARI_SPC_storm_ascending$SPC.norm), ]
beta.all.spc.cari <- CARI_SPC_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
All_SPC_storm <- rbind(FRCH_SPC_storm_ascending, MOOS_SPC_storm_ascending,
CARI_SPC_storm_ascending)
beta.all.SPC <- All_SPC_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, SPC.norm)) # this works just like the beta one that is for an individual site
beta.all.SPC$response_var <- "SPC"
all.2018.ci.SPC <- All_SPC_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(SPC.norm ~ Q.norm, data = .x)))
all.2018.ci.SPC$response_var <- "SPC"
##### Turb #####
FRCH_turb_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_turb_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_turb_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_turb_storm_list_beta, inner_join, by = "valuedatetime")
CARI_turb_storm <- map2_df(CARI_Q_storm_list_beta, CARI_turb_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_turb_storm$storm.ID = c(rep("storm1", 142),
rep("storm10", 689),
rep("storm11a", 353),
rep("storm2a", 364),
rep("storm3", 196),
rep("storm4a", 88),
rep("storm4b", 153),
rep("storm5", 331),
rep("storm6", 303),
rep("storm7", 129),
rep("storm8a", 175),
rep("storm9", 99))
names(FRCH_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
FRCH_turb_storm$site.ID <- "FRCH"
cols <- c("turb.norm","Q.norm")
FRCH_turb_storm[cols] <- log(FRCH_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_turb_storm <- FRCH_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_turb_storm_ascending <- filter(FRCH_turb_storm, limb == "ascending")
FRCH_turb_storm_ascending <- FRCH_turb_storm_ascending[is.finite(FRCH_turb_storm_ascending$Q.norm) & is.finite(FRCH_turb_storm_ascending$turb.norm), ]
beta.all.turb <- FRCH_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
MOOS_turb_storm$storm.ID = c(rep("storm10", 432),
rep("storm11a", 420),
rep("storm2a", 412),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 335),
rep("storm7", 176),
rep("storm8a", 181),
rep("storm9", 109))
names(MOOS_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
MOOS_turb_storm$site.ID <- "MOOS"
MOOS_turb_storm[cols] <- log(MOOS_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_turb_storm <- MOOS_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_turb_storm_ascending <- filter(MOOS_turb_storm, limb == "ascending")
MOOS_turb_storm_ascending <- MOOS_turb_storm_ascending[is.finite(MOOS_turb_storm_ascending$Q.norm) & is.finite(MOOS_turb_storm_ascending$turb.norm), ]
beta.all.turb.moos.with.all <- MOOS_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_turb_storm$storm.ID = c(rep("storm1", 317),
rep("storm10", 254),
rep("storm11", 215),
rep("storm12a", 419),
rep("storm12b", 519),
rep("storm2", 181),
rep("storm3", 121),
rep("storm4a", 277),
rep("storm5a", 777),
rep("storm6", 650),
rep("storm7", 155),
rep("storm8", 191),
rep("storm9", 367))
names(CARI_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
CARI_turb_storm$site.ID <- "CARI"
CARI_turb_storm[cols] <- log(CARI_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_turb_storm <- CARI_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_turb_storm_ascending <- filter(CARI_turb_storm, limb == "ascending")
CARI_turb_storm_ascending <- CARI_turb_storm_ascending[is.finite(CARI_turb_storm_ascending$Q.norm) & is.finite(CARI_turb_storm_ascending$turb.norm), ]
beta.all.turb.cari <- CARI_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
All_turb_storm <- rbind(FRCH_turb_storm_ascending, MOOS_turb_storm_ascending,
CARI_turb_storm_ascending)
beta.all.turb <- All_turb_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
beta.all.turb$response_var <- "turb"
all.2018.ci.turb <- All_turb_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(turb.norm ~ Q.norm, data = .x)))
all.2018.ci.turb$response_var <- "turb"
##### ABS #####
FRCH_abs_storm <- map2_df(FRCH_Q_storm_list_beta, FRCH_abs_storm_list_beta, inner_join, by = "valuedatetime")
MOOS_abs_storm <- map2_df(MOOS_Q_storm_list_beta, MOOS_abs_storm_list_beta, inner_join, by = "valuedatetime")
FRCH_abs_storm$storm.ID = c(rep("storm1", 142),
rep("storm10", 689),
rep("storm11a", 353),
rep("storm2a", 364),
rep("storm3", 196),
rep("storm4a", 88),
rep("storm4b", 153),
rep("storm5", 331),
rep("storm6", 303),
rep("storm7", 129),
rep("storm8a", 175),
rep("storm9", 99))
names(FRCH_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
FRCH_abs_storm$site.ID <- "FRCH"
cols <- c("abs.norm","Q.norm")
FRCH_abs_storm[cols] <- log(FRCH_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
FRCH_abs_storm <- FRCH_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
FRCH_abs_storm_ascending <- filter(FRCH_abs_storm, limb == "ascending")
FRCH_abs_storm_ascending <- FRCH_abs_storm_ascending[is.finite(FRCH_abs_storm_ascending$Q.norm) & is.finite(FRCH_abs_storm_ascending$abs.norm), ]
beta.all.abs <- FRCH_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
MOOS_abs_storm$storm.ID = c(rep("storm10", 432),
rep("storm11a", 420),
rep("storm2a", 412),
rep("storm3", 198),
rep("storm5", 282),
rep("storm6", 335),
rep("storm7", 176),
rep("storm8a", 181),
rep("storm9", 109))
names(MOOS_abs_storm) <- c("DateTime", "Q", "Q.norm", "abs", "abs.norm", "storm.ID")
MOOS_abs_storm$site.ID <- "MOOS"
MOOS_abs_storm[cols] <- log(MOOS_abs_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
MOOS_abs_storm <- MOOS_abs_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
MOOS_abs_storm_ascending <- filter(MOOS_abs_storm, limb == "ascending")
MOOS_abs_storm_ascending <- MOOS_abs_storm_ascending[is.finite(MOOS_abs_storm_ascending$Q.norm) & is.finite(MOOS_abs_storm_ascending$abs.norm), ]
beta.all.abs.moos.with.all <- MOOS_abs_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
All_abs_storm <- rbind(FRCH_abs_storm_ascending, MOOS_abs_storm_ascending)
beta.all.abs <- All_abs_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, abs.norm)) # this works just like the beta one that is for an individual site
beta.all.abs$response_var <- "abs"
all.2018.ci.abs <- All_abs_storm %>%
group_by(site.ID, storm.ID) %>%
group_modify(~ parameters::model_parameters(stats::lm(abs.norm ~ Q.norm, data = .x)))
all.2018.ci.abs$response_var <- "abs"
beta.all.2018 <- rbind(all.2018.ci.no3, all.2018.ci.fDOM,
all.2018.ci.SPC, all.2018.ci.turb,
all.2018.ci.abs)
write.csv(beta.all.2018, here("Output_from_analysis", "06_BETA", "beta.2018.csv"))
beta.all.2018 <- beta.all.2018 %>%
filter(Parameter != "(Intercept)")
