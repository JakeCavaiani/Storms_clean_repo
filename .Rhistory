Q_daily_2022 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2022/Q.daily.2022.csv")
Q_DOD <- rbind(Q_daily_2019, Q_daily_2020, Q_daily_2021, Q_daily_2022)
names(Q_DOD) <- c("site.ID", "day", "dailyQ")
Q_DOD$day <- as.character(Q_DOD$day) # converting to a character to make it the same format as the chem df
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily$datetimeAK <- ymd(mean_daily$day)
mean_daily <- mean_daily[order(mean_daily$year, mean_daily$site.ID), ]
mean_daily$year <- as.character(mean_daily$year)
mean_daily$Burn <- NA
mean_daily <- mean_daily %>%
mutate(across(c(Burn),
~ifelse(site.ID == "CARI" | site.ID == "FRCH" | site.ID == "VAUL", "unburned", "burned")))
mean_daily$PF <- NA
mean_daily <- mean_daily %>%
mutate(across(c(PF),
~ifelse(site.ID == "VAUL" | site.ID == "STRT", "High", "Moderate")))
#extracting year from datetime so there arent NAs
# attempt 1
mean_daily$year <- as.character(format(mean_daily$datetimeAK, "%Y"))
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK", "Burn", "PF")] # reorganizing columns
vn = expression(paste(N*O[3]^"-"))
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
names_prefix = "wk",
values_to = "concentration") # converting to a long format so each response_var is within a single column
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) +
facet_grid(response_var~year, scales = "free") +
theme_classic()
#making a julian day column so there arent NAs
mean_daily$julian <-  yday(mean_daily$datetimeAK)
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK", "Burn", "PF")] # reorganizing columns
vn = expression(paste(N*O[3]^"-"))
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
names_prefix = "wk",
values_to = "concentration") # converting to a long format so each response_var is within a single column
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) +
facet_grid(response_var~year, scales = "free") +
theme_classic()
which(is.na(mean_daily$site.ID))
# cleaning up bottom of df with empty site values
mean_daily <- mean_daily[,-c(2807:2819)]
# cleaning up bottom of df with empty site values
mean_daily <- mean_daily[-c(2807:2819),]
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK", "Burn", "PF")] # reorganizing columns
vn = expression(paste(N*O[3]^"-"))
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
names_prefix = "wk",
values_to = "concentration") # converting to a long format so each response_var is within a single column
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) +
facet_grid(response_var~year, scales = "free") +
theme_classic()
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) +
facet_grid(response_var~as.factor(year), scales = "free") +
theme_classic()
which(is.na(mean_daily$year))
mean_daily <- read.csv(here("Output_from_analysis", "08_Catchment_characteristics", "mean_daily.csv"))
Q_daily_2019 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2019/Q.daily.2019.csv")
Q_daily_2020 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2020/Q.daily.2020.csv")
Q_daily_2021 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2021/Q.daily.2021.csv")
Q_daily_2022 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2022/Q.daily.2022.csv")
Q_DOD <- rbind(Q_daily_2019, Q_daily_2020, Q_daily_2021, Q_daily_2022)
names(Q_DOD) <- c("site.ID", "day", "dailyQ")
Q_DOD$day <- as.character(Q_DOD$day) # converting to a character to make it the same format as the chem df
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily$datetimeAK <- ymd(mean_daily$day)
mean_daily <- mean_daily[order(mean_daily$year, mean_daily$site.ID), ]
mean_daily$year <- as.character(mean_daily$year)
mean_daily$Burn <- NA
mean_daily <- mean_daily %>%
mutate(across(c(Burn),
~ifelse(site.ID == "CARI" | site.ID == "FRCH" | site.ID == "VAUL", "unburned", "burned")))
mean_daily$PF <- NA
mean_daily <- mean_daily %>%
mutate(across(c(PF),
~ifelse(site.ID == "VAUL" | site.ID == "STRT", "High", "Moderate")))
#extracting year from datetime so there arent NAs
mean_daily$year <- as.character(format(mean_daily$datetimeAK, "%Y"))
which(is.na(mean_daily$year))
mean_daily <- mean_daily[-c(2437:2591),]
#making a julian day column so there arent NAs
mean_daily$julian <-  yday(mean_daily$datetimeAK)
# cleaning up bottom of df with empty site values
which(is.na(mean_daily$site.ID))
mean_daily <- read.csv(here("Output_from_analysis", "08_Catchment_characteristics", "mean_daily.csv"))
Q_daily_2019 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2019/Q.daily.2019.csv")
Q_daily_2020 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2020/Q.daily.2020.csv")
Q_daily_2021 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2021/Q.daily.2021.csv")
Q_daily_2022 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2022/Q.daily.2022.csv")
Q_DOD <- rbind(Q_daily_2019, Q_daily_2020, Q_daily_2021, Q_daily_2022)
names(Q_DOD) <- c("site.ID", "day", "dailyQ")
Q_DOD$day <- as.character(Q_DOD$day) # converting to a character to make it the same format as the chem df
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily$datetimeAK <- ymd(mean_daily$day)
mean_daily <- mean_daily[order(mean_daily$year, mean_daily$site.ID), ]
mean_daily$year <- as.character(mean_daily$year)
mean_daily$Burn <- NA
mean_daily <- mean_daily %>%
mutate(across(c(Burn),
~ifelse(site.ID == "CARI" | site.ID == "FRCH" | site.ID == "VAUL", "unburned", "burned")))
mean_daily$PF <- NA
mean_daily <- mean_daily %>%
mutate(across(c(PF),
~ifelse(site.ID == "VAUL" | site.ID == "STRT", "High", "Moderate")))
#extracting year from datetime so there arent NAs
mean_daily$year <- as.character(format(mean_daily$datetimeAK, "%Y"))
which(is.na(mean_daily$year))
mean_daily <- mean_daily[-c(2437,2591),]
#making a julian day column so there arent NAs
mean_daily$julian <-  yday(mean_daily$datetimeAK)
# cleaning up bottom of df with empty site values
which(is.na(mean_daily$site.ID))
mean_daily <- mean_daily[-c(2805:2817),]
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK", "Burn", "PF")] # reorganizing columns
vn = expression(paste(N*O[3]^"-"))
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
names_prefix = "wk",
values_to = "concentration") # converting to a long format so each response_var is within a single column
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) +
facet_grid(response_var~year, scales = "free") +
theme_classic()
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic()
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 30))
supp.labs <- c(`dailyfDOM` = "CV-fDOM",
`dailyNO3` = "CV-NO3-",
`dailySPC` = "CV-SPC",
`dailyTurb` = "CV-turbidity")
supp.labs <- c(`dailyfDOM` = "Daily fDOM",
`dailyNO3` = "Daily NO3-",
`dailySPC` = "Daily SPC",
`dailyTurb` = "Daily Turbidity",
`dailyQ` = "Daily Discharge")
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free",
labeller = as_labeller(supp.labs)) +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_point(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20))
library(here)
library(tidyverse)
library(nlme)
library(forecast)
library(stats)
library(readr)
library(ggplot2)
library(plotly)
library(GGally)
library(ggpmisc)
library(ggpubr)
library(ggExtra)
library(lubridate)
library(lme4)
# library(MuMIn)
library(multcomp)
library(ggpattern)
library(emmeans)
library(multcompView)
AMC <- AMC[c("Hyst_index","site.ID", "storm.ID", "response_var", "Flush_index", "month.y", "day.y", "year", "Beta_index", "doy", "burn", "pf", "date")] # selecting the columns that I want
AMC <- read.csv(here("Output_from_analysis", "07_Combine_HI_BETA_FI", "antecedent_HI_FI_AllYears.csv"))
AMC <- AMC[c("Hyst_index","site.ID", "storm.ID", "response_var", "Flush_index", "month.y", "day.y", "year", "Beta_index", "doy", "burn", "pf", "date")] # selecting the columns that I want
colNames <- c("Hyst_index", "site.ID", "storm.ID", "response_var", "Flush_index", "month", "day", "year", "Beta_index", "doy", "burn", "pf", "date")
names(AMC)<- colNames # renaming columns
AMC <- AMC %>%
group_by(site.ID, response_var, year) %>%
dplyr::summarise(meanHI = mean(Hyst_index, na.rm = TRUE),
meanBETA = mean(Beta_index, na.rm = TRUE),
sdHI = sd(Hyst_index, na.rm = TRUE),
sdBETA = sd(Beta_index, na.rm = TRUE),
CVhi = sdHI/meanHI,
CVbeta = sdBETA/meanBETA,
response_var = paste(response_var),
Date = as.Date(date),
DOY = as.numeric(doy),
burn = paste(burn),
PF = paste(pf))
AMC <- AMC[!duplicated(AMC$meanHI), ] # removing duplicated rows
AMC$year <- as.character(AMC$year)
AMC <- AMC %>%
mutate(across(c(burn),
~ifelse(site.ID == "CARI" | site.ID == "FRCH" | site.ID == "VAUL", "unburned", "burned")))
AMC <- AMC %>%
mutate(across(c(PF),
~ifelse(site.ID == "VAUL" | site.ID == "STRT", "High", "Moderate")))
##subsetting by solute
# NO3 #
HI_FI_NO3 = subset(AMC, response_var == "NO3")
# fDOM #
HI_FI_fDOM = subset(AMC, response_var == "fDOM")
# SPC #
HI_FI_SPC = subset(AMC, response_var == "SPC")
# turb #
HI_FI_turb = subset(AMC, response_var == "turb")
AMC_new <- AMC # reordering the sites to group by burn categorization
AMC_new$site.ID <- factor(AMC_new$site.ID,     # Reorder factor levels
c("CARI", "FRCH", "VAUL", "MOOS", "POKE", "STRT"))
vn = expression(paste(N*O[3]^"-"))
supp.labs <- c("fDOM","NO3-", "SPC", "Turbidity")
names(supp.labs) <- c("fDOM", "NO3", "SPC", "turb")
AMC_new <- AMC_new[-c(21,42,62,79,96), ] # removing absorbance for now
AMC_new$facets = factor(AMC_new$response_var, labels = c(
"fDOM",
"NO3~^{-})",
"SPC",
"Turbidity"))
my_labeller <- as_labeller(c(fDOM="fDOM", NO3="NO[3]", SPC="SPC", turb = "Turbidity"),
default = label_parsed)
ggplot(AMC_new, aes(x = site.ID, y = meanHI, pattern = PF, fill = site.ID)) +
geom_hline(yintercept= 0, linetype="dashed", color = "red")+
geom_boxplot() +
geom_boxplot_pattern(position = position_dodge(preserve = "single"), color = "black", pattern_fill = "white", pattern_angle = 45, pattern_density = 0.1, pattern_spacing = 0.025, pattern_key_scale_factor = 0.6) +
scale_pattern_manual(values = c(High = "stripe", Moderate = "none"), "Permafrost") +
scale_fill_manual(values=c("#3288BD","#FF7F00", "#E7298A", "#A6761D", "#6A3D9A", "#66C2A5")) +
xlab("") +
ylab("Mean HI") +
theme_classic() +
facet_wrap(~response_var, labeller = my_labeller) +
theme(axis.text.x=element_text(size=20, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = "none",
strip.text = element_text(size = 20))
View(AMC_new)
chem_2019 <- read.csv("~/Documents/Storms_clean_repo/processed_sensor_data/2019/SUNA.EXO.int.corr.lab_2019.csv")
chem_2020 <- read.csv("~/Documents/Storms_clean_repo/processed_sensor_data/2020/SUNA.EXO.int.corr.lab_2020.csv")
chem_2021 <- read.csv("~/Documents/Storms_clean_repo/processed_sensor_data/2021/SUNA.EXO.int.corr.lab_2021.csv")
chem_2022 <- read.csv("~/Documents/Storms_clean_repo/processed_sensor_data/2022/SUNA.EXO.int.corr.lab_2022.csv")
DOD_chem <- rbind(chem_2019, chem_2020, chem_2021, chem_2022)
chem_2019 <- chem_2019[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem_2020 <- chem_2020[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem_2021 <- chem_2021[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem_2022 <- chem_2022[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
View(chem_2019)
DOD_chem <- rbind(chem_2019, chem_2020, chem_2021, chem_2022)
View(DOD_chem)
chem_2019$year <- format(chem_2019$datetimeAK, format = "%Y")
View(chem_2019)
str(chem_2019)
chem_2019$datetimeAK <- ymd_hms(chem_2019$datetimeAK)
str(chem_2019)
chem_2019$year <- format(chem_2019$datetimeAK, format = "%Y")
chem_2020$datetimeAK <- ymd_hms(chem_2020$datetimeAK)
chem_2020$year <- format(chem_2020$datetimeAK, format = "%Y")
chem_2021 <- chem_2021[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem_2021$datetimeAK <- ymd_hms(chem_2021$datetimeAK)
chem_2021$year <- format(chem_2021$datetimeAK, format = "%Y")
chem_2022 <- chem_2022[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem_2022$datetimeAK <- ymd_hms(chem_2022$datetimeAK)
chem_2022$year <- format(chem_2022$datetimeAK, format = "%Y")
DOD_chem <- rbind(chem_2019, chem_2020, chem_2021, chem_2022)
DOD_chem$julian <- yday(DOD_chem$datetimeAK)
DOD_chem$day <- as.Date(DOD_chem$datetimeAK)
names(DOD_chem)
DOD_chem <- names(c("datetimeAK", "site.ID", "fDOM", "SPC",
"Turb", "NO3", "ABS_254", "year", "julian", "day"))
DOD_chem <- rbind(chem_2019, chem_2020, chem_2021, chem_2022)
DOD_chem$julian <- yday(DOD_chem$datetimeAK)
DOD_chem$day <- as.Date(DOD_chem$datetimeAK)
names(DOD_chem) <- c("datetimeAK", "site.ID", "fDOM", "SPC",
"Turb", "NO3", "ABS_254", "year", "julian", "day"))
names(DOD_chem) <- c("datetimeAK", "site.ID", "fDOM", "SPC",
"Turb", "NO3", "ABS_254", "year", "julian", "day")
View(DOD_chem)
mean_daily <- DOD_chem %>%
group_by(day, site.ID, year) %>%
summarise(dailyfDOM = mean(fDOM, na.rm = TRUE),
dailyNO3 = mean(NO3, na.rm = TRUE),
dailySPC = mean(SPC, na.rm = TRUE),
dailyTurb = mean(Turb, na.rm = TRUE),
julian = as.numeric(julian))
View(mean_daily)
mean_daily <- mean_daily %>%
group_by(day, site.ID) %>%
slice(which.min(day)) # making sure I just take the first value for the daily mean since it gives the same mean value for each 15minute interval so I just want one
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
values_to = "concentration"
) # converting to a long format so each response_var is within a single column
Q_daily_2019 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2019/Q.daily.2019.csv")
Q_daily_2020 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2020/Q.daily.2020.csv")
Q_daily_2021 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2021/Q.daily.2021.csv")
Q_daily_2022 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2022/Q.daily.2022.csv")
Q_DOD <- rbind(Q_daily_2019, Q_daily_2020, Q_daily_2021, Q_daily_2022)
names(Q_DOD) <- c("site.ID", "day", "dailyQ")
Q_DOD$day <- as.character(Q_DOD$day) # converting to a character to make it the same format as the chem df
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
Q_daily_2019 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2019/Q.daily.2019.csv")
Q_daily_2020 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2020/Q.daily.2020.csv")
Q_daily_2021 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2021/Q.daily.2021.csv")
Q_daily_2022 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2022/Q.daily.2022.csv")
Q_DOD <- rbind(Q_daily_2019, Q_daily_2020, Q_daily_2021, Q_daily_2022)
names(Q_DOD) <- c("site.ID", "day", "dailyQ")
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily <- mean_daily[order(mean_daily$year, mean_daily$site.ID), ]
mean_daily$year <- as.character(mean_daily$year)
#extracting year from datetime so there arent NAs
mean_daily$year <- as.character(format(mean_daily$datetimeAK, "%Y"))
mean_daily <- DOD_chem %>%
group_by(day, site.ID, year) %>%
summarise(dailyfDOM = mean(fDOM, na.rm = TRUE),
dailyNO3 = mean(NO3, na.rm = TRUE),
dailySPC = mean(SPC, na.rm = TRUE),
dailyTurb = mean(Turb, na.rm = TRUE),
julian = as.numeric(julian))
mean_daily <- mean_daily %>%
group_by(day, site.ID) %>%
slice(which.min(day)) # making sure I just take the first value for the daily mean since it gives the same mean value for each 15minute interval so I just want one
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
values_to = "concentration"
) # converting to a long format so each response_var is within a single column
View(Q_DOD)
mean_daily <- left_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily <- DOD_chem %>%
group_by(day, site.ID, year) %>%
summarise(dailyfDOM = mean(fDOM, na.rm = TRUE),
dailyNO3 = mean(NO3, na.rm = TRUE),
dailySPC = mean(SPC, na.rm = TRUE),
dailyTurb = mean(Turb, na.rm = TRUE),
julian = as.numeric(julian))
mean_daily <- mean_daily %>%
group_by(day, site.ID) %>%
slice(which.min(day)) # making sure I just take the first value for the daily mean since it gives the same mean value for each 15minute interval so I just want one
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
values_to = "concentration"
) # converting to a long format so each response_var is within a single column
mean_daily <- full_join(Q_DOD, mean_daily, by = c("site.ID", "day"))
mean_daily$datetimeAK <- ymd(mean_daily$day)
mean_daily <- mean_daily[order(mean_daily$year, mean_daily$site.ID), ]
mean_daily$year <- as.character(mean_daily$year)
#extracting year from datetime so there arent NAs
mean_daily$year <- as.character(format(mean_daily$datetimeAK, "%Y"))
which(is.na(mean_daily$year))
mean_daily <- mean_daily[-c(2922,2933),]
#making a julian day column so there arent NAs
mean_daily$julian <-  yday(mean_daily$datetimeAK)
# cleaning up bottom of df with empty site values
which(is.na(mean_daily$site.ID))
mean_daily <- mean_daily[-c(2980:2992),]
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK", "Burn", "PF")] # reorganizing columns
mean_daily <- mean_daily[c("site.ID", "day", "year", "dailyQ",
"dailyfDOM", "dailyNO3", "dailySPC", "dailyTurb",
"julian", "datetimeAK")] # reorganizing columns
vn = expression(paste(N*O[3]^"-"))
mean_daily_long <- mean_daily %>%
pivot_longer(
cols = starts_with("daily"),
names_to = "response_var",
names_prefix = "wk",
values_to = "concentration") # converting to a long format so each response_var is within a single column
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free",
~factor(response_var, levels=c('dailyQ', 'dailyfDOM', 'dailyNO3', 'dailySPC', 'dailyTurb')))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free")
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(.~year, scales = "free")
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(factor(response_var~year, levels = c('dailyQ', 'dailyfDOM', 'dailyNO3',
'dailySPC', 'dailyTurb')),
scales = "free")
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(~factor(response_var~year, levels = c('dailyQ', 'dailyfDOM', 'dailyNO3',
'dailySPC', 'dailyTurb')),
scales = "free")
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(~factor(response_var, levels = c('dailyQ', 'dailyfDOM', 'dailyNO3',
'dailySPC', 'dailyTurb')),
scales = "free")
mean_daily_long$response_var = factor(mean_daily_long$response_var,
levels=c('dailyQ', 'dailyfDOM', 'dailyNO3', 'dailySPC', 'dailyTurb'))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
axis.text.x=element_text(size=20, angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
axis.text.x=element_text(size=20, angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 20),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 20))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
axis.text.x=element_text(size=20, angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_blank())
mean_daily_long$response_var = factor(mean_daily_long$response_var,
levels=c('dailyQ', 'dailyNO3', 'dailyfDOM', 'dailySPC', 'dailyTurb'))
ggplot(mean_daily_long, aes(x = julian, y = concentration, color = site.ID)) +
geom_line(size = 0.5) +
scale_color_manual(values=c("#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A", "#3288BD")) +
facet_grid(response_var~year, scales = "free") +
theme_classic() +
theme(strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
axis.text.x=element_text(size=20, angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
Sys.which("python")
use_python("/usr/local/bin/python3")
library(tidyverse)
options(tz="America/Anchorage")
library(ggplot2)
library(gridExtra)
library(boot)
library(lubridate)
reticulate::repl_python()
