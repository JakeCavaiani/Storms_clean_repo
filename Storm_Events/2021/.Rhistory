theme_classic() # plot model
HI.frch.fDOM.2.2021 <- left_join(HI.frch.fDOM.2021, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.frch.fDOM.2.2021$TOTAL.TIME <- as.numeric(HI.frch.fDOM.2.2021$TOTAL.TIME)
HI.frch.fDOM.2.2021$Intensity <- HI.frch.fDOM.2.2021$precip/HI.frch.fDOM.2.2021$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
frch.lm.fDOM.2 <- lm(HI.frch.fDOM.2.2021$HI ~ HI.frch.fDOM.2.2021$precip + HI.frch.fDOM.2.2021$Intensity) # model one with total precip and intensity
brr <- HI.frch.fDOM.2.2021 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH fDOM") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.frch.SPC.2.2021 <- left_join(HI.frch.SPC.2021, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.frch.SPC.2.2021$TOTAL.TIME <- as.numeric(HI.frch.SPC.2.2021$TOTAL.TIME)
HI.frch.SPC.2.2021$Intensity <- HI.frch.SPC.2.2021$precip/HI.frch.SPC.2.2021$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
frch.lm.SPC.2 <- lm(HI.frch.SPC.2.2021$HI ~ HI.frch.SPC.2.2021$precip + HI.frch.SPC.2.2021$Intensity) # model one with total precip and intensity
bss <- HI.frch.SPC.2.2021 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH SPC") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.frch.turb.2.2021 <- left_join(HI.frch.turb.2021, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.frch.turb.2.2021$TOTAL.TIME <- as.numeric(HI.frch.turb.2.2021$TOTAL.TIME)
HI.frch.turb.2.2021$Intensity <- HI.frch.turb.2.2021$precip/HI.frch.turb.2.2021$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
frch.lm.turb.2 <- lm(HI.frch.turb.2.2021$HI ~ HI.frch.turb.2.2021$precip + HI.frch.turb.2.2021$Intensity) # model one with total precip and intensity
btt <- HI.frch.turb.2.2021 %>%
ggplot(aes(x=Intensity,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH turb") +
xlab("Intensity (mm/hr)") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
# day of year #
FRCH.2021.1$day <- julian(FRCH.2021.1$DateTime, origin = "2021-01-01", tz = 'America/Anchorage')
FRCH.2021.1$day <- as.numeric(FRCH.2021.1$day)
FRCH.2021.per.storm.5 <- FRCH.2021.1 %>% group_by(storm.num) %>%
summarise_at(vars(day), list(doy = first), na.rm = TRUE) # grouping 3 month precip leading up to a storm
HI.frch.no3.2.2021 <- left_join(HI.frch.no3.2.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.no3.5 <- lm(HI.frch.no3.2.2021$HI ~ HI.frch.no3.2.2021$doy)
buu <- HI.frch.no3.2.2021 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH NO3") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.frch.fDOM.2.2021 <- left_join(HI.frch.fDOM.2.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.fDOM.5 <- lm(HI.frch.fDOM.2.2021$HI ~ HI.frch.fDOM.2.2021$doy)
btb <- HI.frch.fDOM.2.2021 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH fDOM") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.frch.SPC.2.2021 <- left_join(HI.frch.SPC.2.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.SPC.5 <- lm(HI.frch.SPC.2.2021$HI ~ HI.frch.SPC.2.2021$doy)
bvv <- HI.frch.SPC.2.2021 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH SPC") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
HI.frch.turb.2.2021 <- left_join(HI.frch.turb.2.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.turb.5 <- lm(HI.frch.turb.2.2021$HI ~ HI.frch.turb.2.2021$doy)
bww <- HI.frch.turb.2.2021 %>%
ggplot(aes(x=doy,
y=HI)) +
geom_point() +
geom_smooth(method = "lm") +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
ggtitle("FRCH turb") +
xlab("Day of year") +
ylab("HI-Solute Storage") +
theme_classic() # plot model
#plot_grid(baa,bab,bcc,bdd,bee,bff,bgg,bhh,bii,bjj,bkk,bll,bmm,bnn,boo,bpp,bqq,brr,bss,bt,buu,btb,bvv,bww,
#          ncol = 4)
# abs #
HI.frch.abs.2021 <- left_join(HI.mean.precip.frch.abs, FRCH.2021.per.storm.1, by = "storm.num")
HI.frch.abs.2021 <- left_join(HI.frch.abs.2021, FRCH.2021.per.storm.2, by = "storm.num")
HI.frch.abs.2021 <- left_join(HI.frch.abs.2021, FRCH.2021.per.storm.3, by = "storm.num")
HI.frch.abs.2021 <- left_join(HI.frch.abs.2021, FRCH.2021.per.storm.4, by = "storm.num")
HI.frch.abs.2021 <- left_join(HI.frch.abs.2021, FRCH.2021.per.storm.5, by = "storm.num")
frch.lm.abs <- lm(HI.frch.abs.2021$HI ~ HI.frch.abs.2021$precip) # model one with just total precip
frch.lm.abs.2 <- lm(HI.frch.abs.2021$HI ~ HI.frch.abs.2021$precip.week) # model one with just total precip
frch.lm.abs.3 <- lm(HI.frch.abs.2021$HI ~ HI.frch.abs.2021$precip.month) # model one with just total precip
frch.lm.abs.4 <- lm(HI.frch.abs.2021$HI ~ HI.frch.abs.2021$ThreeMonth) # model one with just total precip
frch.lm.abs.5 <- lm(HI.frch.abs.2021$HI ~ HI.frch.abs.2021$temp) # model one with just total precip
HI.frch.abs.2.2021 <- left_join(HI.frch.abs.2021, sum.time, by = "storm.num") # merging total time per storm event and the HI per storm
HI.frch.abs.2.2021$TOTAL.TIME <- as.numeric(HI.frch.abs.2.2021$TOTAL.TIME)
HI.frch.abs.2.2021$Intensity <- HI.frch.abs.2.2021$precip/HI.frch.abs.2.2021$TOTAL.TIME # Intensity is total precip for individual storm divided by total time so we get mm/hr
HI.frch.2021 <- rbind(HI.frch.no3.2.2021, HI.frch.fDOM.2.2021,
HI.frch.SPC.2.2021, HI.frch.turb.2.2021,
HI.frch.abs.2.2021) # merging all responses together
HI.frch.2021$burn <- "unburned" # adding a burn column
HI.frch.2021$pf <- "medium" # adding a pf column
write.csv(HI.frch.2021, here("Output_from_analysis", "04_Antecedent_Conditions", "2021", "HI.frch.2021.csv"))
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(SLOPE)
library(wesanderson)
library(ggpubr)
library(dataRetrieval)
setwd("~/GitHub/Storms_clean_repo/Storm_Events/2021")
storm_file_list_beta <- list.files(path="Test_2/",
recursive=F,
pattern=".csv",
full.names=TRUE)
storm_list_beta<-do.call("list", lapply(storm_file_list_beta,
read.csv,
stringsAsFactors=FALSE,
header=T, row.names=1))
storm_file_list_beta = sub("Test_2//", storm_file_list_beta, replacement = "")
storm_file_list_beta = sub(".csv", storm_file_list_beta, replacement = "")
names(storm_list_beta) = storm_file_list_beta
setwd("~/GitHub/Storms_clean_repo/Storm_Events/2021")
storm_file_list_beta <- list.files(path="Test_2/",
recursive=F,
pattern=".csv",
full.names=TRUE)
storm_list_beta<-do.call("list", lapply(storm_file_list_beta,
read.csv,
stringsAsFactors=FALSE,
header=T, row.names=1))
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(SLOPE)
library(wesanderson)
library(ggpubr)
library(dataRetrieval)
storm_file_list_beta <- list.files(path="Test_2/",
recursive=F,
pattern=".csv",
full.names=TRUE)
storm_list_beta<-do.call("list", lapply(storm_file_list_beta,
read.csv,
stringsAsFactors=FALSE,
header=T, row.names=1))
storm_file_list_beta = sub("Test_2//", storm_file_list_beta, replacement = "")
storm_file_list_beta = sub(".csv", storm_file_list_beta, replacement = "")
names(storm_list_beta) = storm_file_list_beta
FRCH_storm_list_beta = storm_list_beta[c(1:42)] # 42
library(xfun)
library(bit)
library(vctrs)
library(tidyverse)
library(lubridate)
library(scales)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(readr)
library(googledrive)
library(purrr)
library(here)
Q.daily.2021 <- read.csv(here("processed_sensor_data", "2021", "Q.daily.2021.csv"))
Q.2021 <- read.csv(here("processed_sensor_data", "2021", "Q_2021.csv"))
names(Q.2021) <- c("site.ID", "datetimeAK", "Q") # renaming the column headers to match that of the chem file
Q.2021$datetimeAK <- ymd_hms(Q.2021$datetimeAK) # converting character to datetime
Q.2021$datetimeAK <- force_tz(Q.2021$datetimeAK, "America/Anchorage") # converting character to datetime
chem.2021 <- read.csv(here("processed_sensor_data", "2021", "SUNA.EXO.int.corr.lab_2021.csv"))
chem.2021 <- chem.2021[c("datetimeAK", "site.ID", "fDOM.QSU.T.turb.col", "SpCond.uScm.mn.adj",
"Turbidity.FNU.mn.adj", "nitrateuM.mn.lab", "abs254.adj.mn")]
chem.2021$datetimeAK <- ymd_hms(chem.2021$datetimeAK) # converting character to datetime
chem.2021$datetimeAK <- force_tz(chem.2021$datetimeAK, "America/Anchorage") # converting character to datetime
names(chem.2021) <- c("datetimeAK", "site.ID", "fDOM", "SPC", "Turb", "NO3", "ABS_254")
FRCH.2021 <-  subset(chem.2021, site.ID == "FRCH")
FRCH.2021 <- FRCH.2021[order(FRCH.2021$datetimeAK),]
FRCH.2021 <- FRCH.2021[-c(14090:14359), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
MOOS.2021 <-  subset(chem.2021, site.ID == "MOOS")
MOOS.2021 <- MOOS.2021[order(MOOS.2021$datetimeAK),]
MOOS.2021 <- MOOS.2021[-c(14001:14304), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
POKE.2021 <-  subset(chem.2021, site.ID == "POKE")
POKE.2021 <- POKE.2021[order(POKE.2021$datetimeAK),]
POKE.2021 <- POKE.2021[-c(14004:14376), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
STRT.2021 <-  subset(chem.2021, site.ID == "STRT")
STRT.2021 <- STRT.2021[order(STRT.2021$datetimeAK),]
STRT.2021 <- STRT.2021[-c(12567:12845), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
VAUL.2021 <-  subset(chem.2021, site.ID == "VAUL")
VAUL.2021 <- VAUL.2021[order(VAUL.2021$datetimeAK),]
VAUL.2021 <- VAUL.2021[-c(13446:13788), ] # removing unnecessary rows that correspond to when I merge the file the NO3 from the lab merges weird with datetimes from another section within the dataframe
chem.2021 <- rbind(FRCH.2021, MOOS.2021, POKE.2021, STRT.2021, VAUL.2021)
DOD.2021 <- full_join(chem.2021, Q.2021) # merging chem and discharge data
frch.final.discharge.2021 <- subset(Q.2021, site.ID == "FRCH")
head(frch.final.discharge.2021$datetimeAK)
strt.final.discharge.2021 <- subset(Q.2021, site.ID == "STRT")
head(strt.final.discharge.2021$datetimeAK)
moos.final.discharge.2021 <- subset(Q.2021, site.ID == "MOOS")
head(moos.final.discharge.2021$datetimeAK)
poke.final.discharge.2021 <- subset(Q.2021, site.ID == "POKE")
head(poke.final.discharge.2021$datetimeAK)
ggplot(poke.final.discharge.2021, aes(x = datetimeAK, y = Q)) +
geom_point()
vaul.final.discharge.2021 <- subset(Q.2021, site.ID == "VAUL")
head(vaul.final.discharge.2021$datetimeAK)
frch.final.discharge.2021$MeanDischarge <- frch.final.discharge.2021$Q
moos.final.discharge.2021$MeanDischarge <- moos.final.discharge.2021$Q
poke.final.discharge.2021$MeanDischarge <- poke.final.discharge.2021$Q
vaul.final.discharge.2021$MeanDischarge <- vaul.final.discharge.2021$Q
strt.final.discharge.2021$MeanDischarge <- strt.final.discharge.2021$Q
#write.csv(poke.final.discharge.2021, "~/Documents/Storms/Q_Chem/POKE/POKE_Q_2021.csv")
# merge Q and chem
VAUL.2021 <- left_join(vaul.final.discharge.2021, VAUL.2021)
VAUL.2021 <- VAUL.2021[c("site.ID","datetimeAK", "fDOM",
"SPC", "Turb", "NO3", "ABS_254", "Q")]
MOOS.2021 <- left_join(moos.final.discharge.2021, MOOS.2021)
MOOS.2021 <- MOOS.2021[c("site.ID","datetimeAK", "fDOM",
"SPC", "Turb", "NO3", "ABS_254", "Q")]
FRCH.2021 <- left_join(frch.final.discharge.2021, FRCH.2021)
FRCH.2021 <- FRCH.2021[c("site.ID","datetimeAK", "fDOM",
"SPC", "Turb", "NO3","ABS_254", "Q")]
STRT.2021 <- left_join(strt.final.discharge.2021, STRT.2021)
STRT.2021 <- STRT.2021[c("site.ID","datetimeAK", "fDOM",
"SPC", "Turb", "NO3", "ABS_254", "Q")]
POKE.2021 <- full_join(poke.final.discharge.2021, POKE.2021)
POKE.2021 <- POKE.2021[c("site.ID","datetimeAK", "fDOM",
"SPC", "Turb", "NO3", "ABS_254", "Q")]
STRT.st <- read_csv(here("Climate", "Precip", "STRT.RainGauge.2021.csv"))
STRT.st$DateTime <- force_tz(STRT.st$DateTime, "America/Anchorage") # converting character to datetime
VAUL.st <- read_csv(here("Climate", "Precip", "VAUL.RainGauge.2021.csv"))
VAUL.st$DateTime <- force_tz(VAUL.st$DateTime, "America/Anchorage") # converting character to datetime
POKE.st <- read_csv(here("Climate", "Precip", "POKE.RainGauge.2021.csv"))
POKE.st$DateTime <- force_tz(POKE.st$DateTime, "America/Anchorage") # converting character to datetime
names(STRT.st) <- c("min", "inst_rainfall_mm", "datetimeAK", "site.ID")
names(VAUL.st) <- c("min", "inst_rainfall_mm", "datetimeAK", "site.ID")
names(POKE.st) <- c("datetimeAK", "CRREL", "CARI", "inst_rainfall_mm", "site.ID")
strt.precip.discharge <- full_join(strt.final.discharge.2021, STRT.st) # merging precip data and discharge
vaul.precip.discharge <- full_join(vaul.final.discharge.2021, VAUL.st) # merging precip data and discharge
poke.precip.discharge <- full_join(poke.final.discharge.2021, POKE.st) # merging precip data and discharge
strt.precip.discharge$twentyfour <- rollapplyr(strt.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
strt.precip.discharge$fourtyeight <- rollapplyr(strt.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA, partial = TRUE)
vaul.precip.discharge$twentyfour <- rollapplyr(vaul.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
vaul.precip.discharge$fourtyeight <- rollapplyr(vaul.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA, partial = TRUE)
poke.precip.discharge$twentyfour <- rollapplyr(poke.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA, partial = TRUE)
poke.precip.discharge$fourtyeight <- rollapplyr(poke.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA, partial = TRUE)
# Greater than 5 #
strt.five.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
strt.five.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
vaul.five.twenty.four <- vaul.precip.discharge[which(vaul.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
vaul.five.fourty.eight <- vaul.precip.discharge[which(vaul.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
poke.five.twenty.four <- poke.precip.discharge[which(poke.precip.discharge$twentyfour >= 5),] # twenty four hour period where the precip is 5
poke.five.fourty.eight <- poke.precip.discharge[which(poke.precip.discharge$fourtyeight >= 5),] # fourty eight hour period where the precip is greater than 10
# Greater than 10 #
strt.ten.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
strt.ten.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
vaul.ten.twenty.four <- vaul.precip.discharge[which(vaul.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
vaul.ten.fourty.eight <- vaul.precip.discharge[which(vaul.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
poke.ten.twenty.four <- poke.precip.discharge[which(poke.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
poke
poke.ten.fourty.eight <- poke.precip.discharge[which(poke.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
# STRT #
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-01 00:00:00"), tz="America/Anchorage"),
ylim = c(7,0),
axes=F, xlab="", ylab="")
STRT <- STRT.2021
STRT$MeanDischarge <- STRT$Q
STRT$DateTime <- STRT$datetimeAK
STRT$nitrateuM <- STRT$NO3
STRT$fDOM.QSU <- STRT$fDOM
STRT$SpCond.uScm <- STRT$SPC
STRT$Turbidity.FNU <- STRT$Turb
STRT.st$DateTime <- STRT.st$datetimeAK
# storm 1a #
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
par(new = T)
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(5,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(strt.five.fourty.eight$DateTime), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(strt.five.twenty.four$DateTime), col="green", lwd = 0.05)
abline(v= as.POSIXct("2021-08-15 10:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-17 10:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage"), col="purple")
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
par(new = T)
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(5,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(strt.five.fourty.eight$DateTime), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(strt.five.twenty.four$DateTime), col="green", lwd = 0.05)
abline(v= as.POSIXct("2021-08-15 10:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage"), col="purple")
STRT_storm1a_08_15 = STRT[STRT$DateTime > as.POSIXct("2021-08-15 10:30:00", tz="America/Anchorage") &
STRT$DateTime < as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage"),]
plot(STRT_storm1a_08_15$MeanDischarge ~ as.POSIXct(STRT_storm1a_08_15$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(600,1500), col="blue", main="FRCH 210815 storm 1a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm1a_08_15$MeanDischarge ~ as.POSIXct(STRT_storm1a_08_15$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(600,2000), col="blue", main="FRCH 210815 storm 1a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
par(new = T)
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(5,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(strt.five.fourty.eight$DateTime), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(strt.five.twenty.four$DateTime), col="green", lwd = 0.05)
abline(v= as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-21 02:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-23 07:30:00", tz="America/Anchorage"), col="purple")
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
par(new = T)
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(5,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(strt.five.fourty.eight$DateTime), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(strt.five.twenty.four$DateTime), col="green", lwd = 0.05)
abline(v= as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-23 07:30:00", tz="America/Anchorage"), col="purple")
STRT_storm2a_08_19 = STRT[STRT$DateTime > as.POSIXct("2021-08-20 02:30:00", tz="America/Anchorage") &
STRT$DateTime < as.POSIXct("2021-08-23 07:30:00", tz="America/Anchorage"),]
plot(STRT_storm2a_08_19$MeanDischarge ~ as.POSIXct(STRT_storm2a_08_19$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(800,1500), col="blue", main="FRCH 210819 storm 2a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm2a_08_19$MeanDischarge ~ as.POSIXct(STRT_storm2a_08_19$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(800,1800), col="blue", main="FRCH 210819 storm 2a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm2a_08_19$MeanDischarge ~ as.POSIXct(STRT_storm2a_08_19$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(1000,1800), col="blue", main="FRCH 210819 storm 2a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm2a_08_19$MeanDischarge ~ as.POSIXct(STRT_storm2a_08_19$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(1200,1800), col="blue", main="FRCH 210819 storm 2a",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
par(new = T)
plot(STRT.st$inst_rainfall_mm ~ STRT.st$DateTime, type="h",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"),
ylim = c(5,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'CRREL Met Station precip. (mm)')
abline(v = as.POSIXct(strt.five.fourty.eight$DateTime), col = "yellow", lwd = 0.1)
abline(v = as.POSIXct(strt.five.twenty.four$DateTime), col="green", lwd = 0.05)
abline(v= as.POSIXct("2021-08-25 23:30:00", tz="America/Anchorage"), col="purple")
abline(v= as.POSIXct("2021-08-27 07:30:00", tz="America/Anchorage"), col="purple")
STRT_storm3_08_25 = STRT[STRT$DateTime > as.POSIXct("2021-08-25 23:30:00", tz="America/Anchorage") &
STRT$DateTime < as.POSIXct("2021-08-27 07:30:00", tz="America/Anchorage"),]
plot(STRT_storm3_08_25$MeanDischarge ~ as.POSIXct(STRT_storm3_08_25$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(900,1300), col="blue", main="FRCH 210825 storm 3",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm3_08_25$MeanDischarge ~ as.POSIXct(STRT_storm3_08_25$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(120,1500), col="blue", main="FRCH 210825 storm 3",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm3_08_25$MeanDischarge ~ as.POSIXct(STRT_storm3_08_25$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(1200,1500), col="blue", main="FRCH 210825 storm 3",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
plot(STRT_storm3_08_25$MeanDischarge ~ as.POSIXct(STRT_storm3_08_25$DateTime, tz="America/Anchorage"), type="l", xlab="", ylab="Q (L/sec)",ylim = c(1200,1600), col="blue", main="FRCH 210825 storm 3",
xlim = as.POSIXct(c("2021-08-13 00:00:00","2021-08-31 23:45:00"), tz="America/Anchorage"))
STRT_storm1a_08_15_Q = subset(STRT_storm1a_08_15, select = c("DateTime","MeanDischarge"))
names(STRT_storm1a_08_15_Q) = c("valuedatetime","datavalue")
STRT_storm1a_08_15_NO3 = subset(STRT_storm1a_08_15, select = c("DateTime","nitrateuM"))
names(STRT_storm1a_08_15_NO3) = c("valuedatetime","datavalue")
STRT_storm1a_08_15_fDOM = subset(STRT_storm1a_08_15, select = c("DateTime","fDOM.QSU"))
names(STRT_storm1a_08_15_fDOM) = c("valuedatetime","datavalue")
STRT_storm1a_08_15_SPC = subset(STRT_storm1a_08_15, select = c("DateTime","SpCond.uScm"))
names(STRT_storm1a_08_15_SPC) = c("valuedatetime","datavalue")
STRT_storm1a_08_15_turb = subset(STRT_storm1a_08_15, select = c("DateTime","Turbidity.FNU"))
names(STRT_storm1a_08_15_turb) = c("valuedatetime","datavalue")
STRT_storm1a_08_15_abs = subset(STRT_storm1a_08_15, select = c("DateTime","ABS_254"))
names(STRT_storm1a_08_15_abs) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_Q = subset(STRT_storm2a_08_19, select = c("DateTime","MeanDischarge"))
names(STRT_storm2a_08_19_Q) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_NO3 = subset(STRT_storm2a_08_19, select = c("DateTime","nitrateuM"))
names(STRT_storm2a_08_19_NO3) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_fDOM = subset(STRT_storm2a_08_19, select = c("DateTime","fDOM.QSU"))
names(STRT_storm2a_08_19_fDOM) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_SPC = subset(STRT_storm2a_08_19, select = c("DateTime","SpCond.uScm"))
names(STRT_storm2a_08_19_SPC) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_turb = subset(STRT_storm2a_08_19, select = c("DateTime","Turbidity.FNU"))
names(STRT_storm2a_08_19_turb) = c("valuedatetime","datavalue")
STRT_storm2a_08_19_abs = subset(STRT_storm2a_08_19, select = c("DateTime","ABS_254"))
names(STRT_storm2a_08_19_abs) = c("valuedatetime","datavalue")
STRT_storm3_08_25_Q = subset(STRT_storm3_08_25, select = c("DateTime","MeanDischarge"))
names(STRT_storm3_08_25_Q) = c("valuedatetime","datavalue")
STRT_storm3_08_25_NO3 = subset(STRT_storm3_08_25, select = c("DateTime","nitrateuM"))
names(STRT_storm3_08_25_NO3) = c("valuedatetime","datavalue")
STRT_storm3_08_25_fDOM = subset(STRT_storm3_08_25, select = c("DateTime","fDOM.QSU"))
names(STRT_storm3_08_25_fDOM) = c("valuedatetime","datavalue")
STRT_storm3_08_25_SPC = subset(STRT_storm3_08_25, select = c("DateTime","SpCond.uScm"))
names(STRT_storm3_08_25_SPC) = c("valuedatetime","datavalue")
STRT_storm3_08_25_turb = subset(STRT_storm3_08_25, select = c("DateTime","Turbidity.FNU"))
names(STRT_storm3_08_25_turb) = c("valuedatetime","datavalue")
STRT_storm3_08_25_abs = subset(STRT_storm3_08_25, select = c("DateTime","ABS_254"))
names(STRT_storm3_08_25_abs) = c("valuedatetime","datavalue")
write.csv(STRT_storm1a_08_15, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15.csv"))
write.csv(STRT_storm1a_08_15_Q, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_Q.csv"))
write.csv(STRT_storm1a_08_15_NO3, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_NO3.csv"))
write.csv(STRT_storm1a_08_15_fDOM, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_fDOM.csv"))
write.csv(STRT_storm1a_08_15_SPC, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_SPC.csv"))
write.csv(STRT_storm1a_08_15_turb, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_turb.csv"))
write.csv(STRT_storm1a_08_15_abs, here("Storm_Events", "2021", "STRT", "STRT_storm1a_08_15_abs.csv"))
write.csv(STRT_storm2a_08_19, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19.csv"))
write.csv(STRT_storm2a_08_19_Q, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_Q.csv"))
write.csv(STRT_storm2a_08_19_NO3, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_NO3.csv"))
write.csv(STRT_storm2a_08_19_fDOM, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_fDOM.csv"))
write.csv(STRT_storm2a_08_19_SPC, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_SPC.csv"))
write.csv(STRT_storm2a_08_19_turb, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_turb.csv"))
write.csv(STRT_storm2a_08_19_abs, here("Storm_Events", "2021", "STRT", "STRT_storm2a_08_19_abs.csv"))
write.csv(STRT_storm3_08_25, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25.csv"))
write.csv(STRT_storm3_08_25_Q, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_Q.csv"))
write.csv(STRT_storm3_08_25_NO3, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_NO3.csv"))
write.csv(STRT_storm3_08_25_fDOM, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_fDOM.csv"))
write.csv(STRT_storm3_08_25_SPC, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_SPC.csv"))
write.csv(STRT_storm3_08_25_turb, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_turb.csv"))
write.csv(STRT_storm3_08_25_abs, here("Storm_Events", "2021", "STRT", "STRT_storm3_08_25_abs.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(boot)
library(lubridate)
library(here)
Sys.which("python")
use_python("/usr/local/bin/python3")
options(tz="America/Anchorage")
# install pandas #
virtualenv_create("r-reticulate")
# RETICULATE_PYTHON = "lib/python3.8"
reticulate::py_config()
reticulate::py_install("pandas")
reticulate::repl_python()
